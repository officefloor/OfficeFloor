                                               -----------------------
                                            Interactive HTTP Server Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Interactive HTTP Server Tutorial>>
  
  This tutorial looks at handling a form submission.
  
  The below example for this tutorial will implement a simple form submission, validate a name was entered, and provide a message if successfully entered values.  The simple form for this tutorial is as follows:
    
[./images/InteractiveHttpServer-screenshot.png] InteractiveHttpServer screenshot.
  
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/InteractiveHttpServer/${projectVersion}/InteractiveHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}
  


Template.woof.html

  The below is the content of the <<<Template.woof.html>>>.

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.woof.html}

  This is similar HTML to previous tutorials.


TemplateLogic Class

  The logic to handle the form submission is the following:
  
%{code-snippet|brush-autodetect=1|id=class|file=${basedir}/src/main/java/net/officefloor/tutorial/pageflowhttpserver/TemplateLogic.java}

  The aspects to notice are:
  
    * the method <<<handleSubmission()>>> matches in name to the <<<#\{handleSubmission\}>>> of the HTML form action.  As the names are the same, WoOF will reflectively invoke the method to handle the form submission.  By default WoOF will re-render the page after the method completes.  Later tutorials will look at controlling navigation to other pages. 
    
    * the <<<Parameters>>> inner class is annotated with <<<@HttpParameters>>>.  As this is dependency injected into the form handling method, WoOF sees the annotation and will construct an instance of the object by its default constructor and load the HTTP parameters to its setter methods by corresponding names (e.g. name to <<<setName(String name)>>>).  Note that this object is constructed once for each HTTP request so is the same object dependency injected into the <<<getTemplateData(...)>>> method - allowing entered values to be re-rendered to the page.
  
  OfficeFloor achieves this simple interactive programming model by subsituting into the rendered page a unique url which it can map back to the corresponding method.  The method is matched by its name and is free to have any parameters it requires (enabled by OfficeFloor's dependency injection).  For example in more complex applications the handling methods may include a parameter for a <<<DataSource>>> or <<<EntityManager>>> to enable database interaction rather than just providing a message back to the client.



Unit Test

  The unit test requests the various URL's exposed from the template.

%{code-snippet|brush-autodetect=1|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/pageflowhttpserver/PageFlowHttpServerTest.java}



Next

  The {{{../NavigateHttpServer/index.html}next tutorial}} looks at controlling navigating between pages (templates).
