				       ------------------
				             Welcome
				       ------------------
				      Daniel Sagenschneider
				       ------------------

  <<Welcome to OfficeFloor>>

~~ spacing
---
 
---

[./images/OfficeFloor_Blurb.png] OfficeFloor is a true inversion of control container making it simple yet powerful framework for building Java web applications that is a build once run anywhere solution â€“ even with Cloud Computing.

~~ spacing
---
 
---

  In addition to making it simple to build a Java web application, once built OfficeFloor enables the application to be run stand-alone, within a JEE Application Server or by any of the Cloud Computing providers.

  The run anywhere flexibility is a unique aspect of the OfficeFloor framework due to its inversion of control fundamentals of:
  
   * <<context>>

   * <<dependency injection>>
  
   * <<thread injection>>

   * <<function orchestration>>

  Further focus on intuitive graphical configuration makes applications built with OfficeFloor self documenting - which works great with both Agile and Support.

  OfficeFloor is freely distributed under GPL (LGPL also available on request) and the source is available {{{./source-repository.html}here}}.
  
  The following are the simple steps to build a web application with OfficeFloor.

~~ spacing
---
 
---
  
[./images/OfficeFloor_StepOne.png] OfficeFloor Step One.

  OfficeFloor dynamic web pages only require the following 3 non-obtrusive tags:
     
   * << \<!-- {section} --\> >> : segments the web page into functions
       
   * << $\{property\} >> : allows dynamic content from POJOs (plain old Java objects) to be rendered on the web page
       
   * << #\{link\} >> : allows indirection of web page links to enable graphical configuration of the web site navigation
  
  The reason for using non-obtrusive tags in the web pages is to allow OfficeFloor to integrate with WYSIWYG web design tools (e.g. {{{http://www.adobe.com/products/dreamweaver.html}DreamWeaver}}, {{{http://kompozer.net}KompoZer}}) to create and edit the web pages.
  
  Also reviewers can open the raw web pages in any web browser.  This makes for faster feedback loops with the Web Designer enabling just the right look and feel for the web application.
  
~~ spacing
---
 
---

[./images/OfficeFloor_StepTwo.png] OfficeFloor Step Two.

  The application logic is written with POJOs (plain old Java objects) but in a slightly different focus to many dependency injection frameworks.  Instead of injecting the dependency into the object, OfficeFloor injects the dependency as a parameter into the method.  This slight difference is key to OfficeFloor's simplicity yet power!
  
  So why dependency inject into the method?  Methods are the natural building blocks for managed code, just look at the JEE API's to see this:
  
   * Servlet has the service(...) method
   
   * JMS has the onMessage(...) method
   
   * Session Beans contain methods run within a context

  OfficeFloor focuses on the method and its <<context>>, <<dependent injection>> and the invoking thread (<<thread injection>>).

  OfficeFloor also provides simplified integration with {{{http://code.google.com/webtoolkit/}GWT}} so that the AJAX rich user web page experience can be written in Java.  This keeps all code in the one programming language for easier development and support.  This however does not prevent the use of JavaScript, {{{http://jquery.com}jQuery}} or any other rich user interface technologies.

~~ spacing
---
 
---
   
[./images/OfficeFloor_StepThree.png] OfficeFloor Step Three.

  The web pages and POJO methods are connected together via OfficeFloor's <<function orchestration>> to work as a cohesive web application.  
  
  OfficeFloor's function orchestration is configured graphically:
  
   * which provides a visual representation that all stakeholders can use to ensure the application is doing the right things
  
   * makes OfficeFloor web applications self documenting, which is great for Agile and Support teams

   * simplifies changing the application  
   
  Unlike most orchestration frameworks, OfficeFloor function orchestration requires no additional coding/configuration.  OfficeFloor will interrogate the web pages and POJO methods to obtain all necessary information.
  
  An {{{./eclipse/index.html}OfficeFloor Eclipse plug-in}} provides the tools to graphically configure the function orchestration.

~~ spacing
---
 
---

[./images/OfficeFloor_StepFour.png] OfficeFloor Step Four.

  The run anywhere flexibility provided by OfficeFloor's fundamentals means that web applications built with the OfficeFloor framework can be run where ever is most appropriate:
  
   * on the developer's or tester's workstation
   
   * as a stand-alone web application
   
   * within an existing JEE Application Server
   
   * by a Cloud Computing provider
  
  The <<build once run anywhere>> flexibility of OfficeFloor allows the decision of where to run the web application to be deferred to when the web application is to go live - allowing the best location to be used.  And if the location is no longer the best, OfficeFloor enables moving the web application to a better location without having to rebuild the web application.
  
~~ spacing
---
 
---

  To <<find out more>> about OfficeFloor:
  
   * Check out the {{{./tutorials/index.html}Tutorials}} covering various features of OfficeFloor.
   
   * Read this site's {{{./OfficeFloor.pdf}documentation offline}}.
   
   * Install the {{{./eclipse/index.html}OfficeFloor Eclipse plug-in}} and try out OfficeFloor.
   
   * See {{{./getting-help.html}getting help}}.

