                                               -----------------------
                                             Navigate HTTP Server Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Navigate Http Server Tutorial>>

  This tutorial demonstrates navigating back and forth between the following two pages:
  
[./images/NavigateHttpServer-one-screenshot.png] NavigateHttpServer one screenshot.

[./images/NavigateHttpServer-two-screenshot.png] NavigateHttpServer two screenshot.

  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/NavigateHttpServer/${projectVersion}/NavigateHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}
  
application.woof

  The following shows the configuration of the two web page templates and the navigation between the templates.

[./images/navigate-woof.png] application.woof configuration.

  The links are the navigation paths between the templates.  Each template provides outputs that by the above configuration navigates the user to the other page.
  
  The rest of this tutorial will detail how to add the template outputs.


@NextTask

  The first template provides a link to navigate to the other template.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/TemplateOne.html}
  
  The stylesheet is not necessary for navigation linking but is included to show that normal HTML/CSS functionality works.  The stylesheets in this case just provides background colouring to the page to highlight navigation back and forth between the two pages (templates).

  The link is handled by the following method.  The annotation indicates what is the next task within the flow.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/navigatehttpserver/TemplateOne.java}

  As the next task name is not a template method name nor a name of a template section it becomes an output from the HTTP template.  From the configuration above, the output is configured to navigate to the other template.
  
  OfficeFloor strings {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}} instances together allowing control over the rendering of templates and navigation between templates.  It is actually possible to string together multiple templates by linking the <<<output>>> of the template to render further templates in a response.  The <<<output>>> link is optional to be connected, however all other outputs must be linked.

  A template is actually an implementation of a {{{/apidocs/net/officefloor/compile/spi/section/source/SectionSource.html}SectionSource}} within OfficeFloor.  A section has named inputs and outputs that are linked together.  This is the mechanism by which OfficeFloor joins sections (templates) together as functional building blocks of an application.


@FlowInterface

  The second template uses a submit to navigate to the original template.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/TemplateTwo.html}

  Much like the first template the logic class also navigates to an external flow.  In this case it uses an interface for programmatic control of flow control.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/navigatehttpserver/TemplateTwo.java}

  OfficeFloor will provide an implementation of the interface.  Each method on the interface will be linked by name to:
  
   * a method on the template logic class
   
   * a section of the template
   
   * an external flow from the template.  This is then linked by the <<<application.woof>>> configuration (as is the case above)
   
  This allows programmatically determining which is the next task.
  
  Both <<<@NextTask>>> and <<<@FlowInterface>>> may also be used in combination. <<<@NextTask>>> will provide the default next task unless overrided by a method of a <<<@FlowInterface>>> being invoked.

  The above configuration has the external flow linked back to the first template.


Unit Test

  The unit test navigates between the templates.

%{code-snippet|brush-autodetect=1|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/navigatehttpserver/NavigateHttpServerTest.java}

Next

  The {{{../SessionHttpServer/index.html}next tutorial}} looks at storing state between requests within a HTTP session.

