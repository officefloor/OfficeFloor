				       ------------------
				    My First WoOF Application
				       ------------------
				      Daniel Sagenschneider
				       ------------------

  <<My first WoOF application>>
  
  This tutorial walks you through adding WoOF capabilities to an existing JEE Web Application to provide as always the following simple example (with <World> dynamically rendered):
  
[./images/MyFirstWoofApp-hello-world.png] Hello World screenshot.

  Please be aware that this tutorial does not highlight many features of WoOF as it walks through introducing WoOF to an existing Java Web Application.  Please skip to the {{{../DynamicHttpServer/index.html}next tutorial}} should you want to start looking at the features of WoOF.

  To keep the tutorial focused on introducing WoOF the default {{{http://maven.apache.org}Maven}} webapp archetype will be used as the existing application.  Therefore, please have {{{http://maven.apache.org}Maven}} installed.
  
  Should you have any questions regarding this tutorial, please do not hesitate to ask (click on bottom right hand box to chat with us online).  We are happy to answer your questions.  Should we all happen to be offline, please use {{{../../getting-help.html}Getting Help}}.

  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/MyFirstWoofApp/${projectVersion}/MyFirstWoofApp-${projectVersion}-project.zip/download}Download Tutorial Source}} if you want to see the completed tutorial source code.

Steps
  
%{toc|fromDepth=2}

*1. Create the existing WebApp

  As per {{{http://maven.apache.org/guides/mini/guide-webapp.html}Maven Guide to WebApps}}, the default WebApp is created with the following command:
  
+-----------------------------------------+
    mvn archetype:create -DarchetypeArtifactId=maven-archetype-webapp -DgroupId=my.first.woof -DartifactId=MyFirstWoofApp
+-----------------------------------------+

  On completion of the command, a new directory <<<MyFirstWoofApp>>> should be created containing the WebApp.
  

  
*2. Import the project into Eclipse

  To import the project into {{{http://eclipse.org}Eclipse}} the necessary Eclipse files need to be created with the following command.  Therefore change into the created WebApp project directory and create the files with the following commands:

+-----------------------------------------+
    cd MyFirstWoofApp
    mvn eclipse:eclipse
+-----------------------------------------+

  The WebApp is now ready to be imported into Eclipse as a project.  Therefore:
  
    [[1]] Open Eclipse
    
    [[1]] Within the <<<Package Explorer>>>, right click and select <<<Import...>>>
    
    [[1]] Choose <<<Existing Projects into Workspace>>> and then click <<<Next>>>
    
    [[1]] Enter root directory as the directory created above and then click <<<Finish>>>
    
  The project should now be imported and ready to edit.



*3. Add WoOF dependency

  First things first, add the following dependency for WoOF to the <<<pom.xml>>> file:
  
%{code-snippet|brush-autodetect=1|id=woof|file=${basedir}/pom.xml}

  Once added you will likely need to re-create the Eclipse files to pick up the WoOF dependency with the following command:
  
+-----------------------------------------+
    mvn eclipse:clean eclipse:eclipse
+-----------------------------------------+
  
  On refreshing the project within Eclipse, the WoOF dependencies should now be available.



*4. Create the HTML template

  Within the <<<src/main/webapp>>> directory create the file <<<Template.html>>> with the following content:
  
%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.html}



*5. Create the page logic class

  The defaultly created WebApp does not include the Java source directory, therefore within Eclipse:
  
    [[1]] create the source directory <<<src/main/java>>> 
    
    [[1]] and underneath it the package <<<my.first.woof>>>
    
  Within the package create the following two classes.
  
  <<TemplateLogic>>

%{code-snippet|brush-autodetect=1|id=code|file=${basedir}/src/main/java/my/first/woof/TemplateLogic.java}

  This class provides the dynamic logic for the web page by providing the <<<World>>> class to the template rendering.  
  
  Please note that this is the most simplest of logic classes for a web page by providing the property object for the default <<<Template>>> section.  The {{{../index.html}tutorials}} provide more detail on what this means and how more complex dynamic logic can be added by just adding methods to this class.

  <<World>>

%{code-snippet|brush-autodetect=1|id=code|file=${basedir}/src/main/java/my/first/woof/World.java}

  This class is returned by the above <<<TemplateLogic>>> class to provide the property values to be rendered to the page (in this case <<<$\{text\}>>> ).

  

*6. Configure the WoOF Application

  WoOF is configured by graphical configuration and requires installation of the OfficeFloor Eclipse Plug-ins.  Please use the instructions on the following link to install the OfficeFloor Eclipse Plug-ins:
  
  {{{../../eclipse/index.html}Install OfficeFloor Eclipse Plug-ins}}
  
  Once the OfficeFloor Eclipse Plug-ins are installed, the <<<application.woof>>> configuration file needs to be created by:
  
    [[1]] Right clicking on <<<src/main/resources>>> and select <<<New>>> then <<<Other...>>>
    
    [[1]] Under <<<OfficeFloor>>> select <<<WoOF>>> and click <<<Next>>>.
    
    [[1]] Use the default values, so just click <<<Finish>>>

  You should now be presented with following blank graphical editor:
  
[./images/MyFirstWoofApp-blank-woof.png] Blank application.woof.

  To add the template, right click within the graphical editor and select <<<Add template>>>.  The following dialog will be presented to which the following configuration should be provided:

[./images/MyFirstWoofApp-add-template.png] Blank application.woof.
  
   * Template Path: <<<Template.html>>>
   
   * Logic class: <<<my.first.woof.TemplateLogic>>>
   
   * URI: <<<template>>>
  
  Once clicking on <<<Finish>>> the <<<application.woof>>> should now look as follows.
  
[./images/MyFirstWoofApp-woof.png] Configured application.woof.

  WoOF is now configured to respond with above web page to the <<</template>>> URI. 


*7. Add the WoofServletFilter

  Before running the application, we need to also make the JEE Servlet Container aware of WoOF by adding the following Filter configuration to <<<src/main/webapp/WEB-INF/web.xml>>>:

%{code-snippet|brush-autodetect=1|id=filter|file=${basedir}/src/main/webapp/WEB-INF/web.xml}

  All coding and configuration is now complete for adding WoOF to an existing WebApp.
  

*8. Running the WebApp

  {{{http://wiki.eclipse.org/Jetty/Feature/Jetty_Maven_Plugin#Quick_Start:_Get_Up_and_Running}Jetty}} provides a Maven plug-in for running a WebApp.  Use the following command to run the WebApp:

+-----------------------------------------+
    mvn org.mortbay.jetty:jetty-maven-plugin:run
+-----------------------------------------+

  After running the above command, the WoOF template content will be available at <<<http://localhost:8080/template>>> and look as follows:
  
[./images/MyFirstWoofApp-hello-world.png] Hello World screenshot.
  


*Congratulations

  Congratulations you have just created and run your first WoOF Web Application.
  
  Please see the {{{../index.html}tutorials}} for adding further functionality to your WoOF Web Application.

