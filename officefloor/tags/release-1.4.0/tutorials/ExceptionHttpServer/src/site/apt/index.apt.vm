                                               -----------------------
                                             Exception Handling Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Exception Handling Tutorial>>

  This tutorial demonstrates the ease in handling potential exceptions within web applications.  The tutorial will demonstrate this by a template method throw an exception which is handled by logging the exception to <<<stderr>>>.  Though this is a simple example it does demonstrate the ease of handling exceptions along with introducing the <<<@Parameter>>> annotation to allow passing an object between methods.

  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/ExceptionHttpServer/${projectVersion}/ExceptionHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}



Template throwing exception

  The following template is being used to have an <<<SQLException>>> being thrown (see specifically the <<<submit()>>> method):
  
%{code-snippet|brush=xml|file=${basedir}/src/main/resources/Template.html}

  with the following logic throwing the exception:
  
%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/exceptionhttpserver/TemplateLogic.java}

  From the above, pressing the submit button will trigger the exception to be thrown.  The following will demonstrate how to configure handling this exception.
  


Exception handling configuration
  
  The following configuration configures in the template above that throws the exception and the exception handling (right click within the <<<application.woof>>> graphical editor and <<<Add Exception>>>):
  
[./images/ExceptionHttpServer-screenshot.png] ExceptionHttpServer screenshot.

  The exception being handled is an <<<SQLException>>> which you can see is linked to the <<<Handler>>>.  The <<<Handler>>> is a Class Section (right click within the <<<application.woof>>> graphical editor and <<<Add Section>>>) that is the following class:
  
%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/exceptionhttpserver/ExceptionHandler.java}

  The configuration reflects the input to the section being the method name and the output being the value of the <<<@NextTask>>> annotation.  Therefore on an <<<SQLException>>> occurring, the <<<handleSqlException>>> method is used for handling the exception.



@Parameter
  
  The additional annotation is the <<<@Parameter>>> which identifies it to be a value passed from the previous task.  The handling of an exception is actually via OfficeFloor functionality which allows specifying a task to receive specific exceptions and WoOF provides this task to pass the exception to the configured next task - in this case the <<<handleSqlException(...)>>> method which logs the exception.
  
  The <<<@Parameter>>> annotation can be also be used to obtain the value from the following:
  
   * receive the exception being handled (as in above example)
  
   * return value from a immediate previous method that is annotated with <<<@NextTask>>>
   
   * parameter to a <<<@FlowInterface>>> method
   
  This functionality is useful and provided by the underlying OfficeFloor framework, however within WoOF the necessity to pass parameters is used typically only for exception handling as there are other means for passing state between methods (e.g. via session objects).



Resource
  
  The remaining configuration indicates that the <<<TechnicalFault>>> should send a static response - in this case the following:
  
%{code-snippet|brush=xml|file=${basedir}/src/main/resources/PUBLIC/Error.html}

  It is possible to use the details of the exception within a dynamic template to generate a response, however a static resource (right click in the <<<application.woof>>> graphical editor and <<<Add Resource>>>) is used for simplicity.



Unit Test

  The following unit test shows the exception handling by listening in on <<<stderr>>> to ensure the exception message is written to it:
  
%{code-snippet|brush-autodetect=1|id=handle|file=${basedir}/src/test/java/net/officefloor/tutorial/exceptionhttpserver/ExceptionHttpServerTest.java}

  

Next

  The basics of WoOF have now been covered. Please look at the {{{../index.html}next group of tutorials}} for using WoOF within a JEE Servlet Container.

