                                               -----------------------
                                             Database HTTP Server Example 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Database Http Server Example>>

  This example demonstrates dependency injection of a <<<DataSource>>> via a HTTP Server that interacts with a database.  The application will display the data from a database table along with the functionality to clear the table and add rows to the table.
  
  The <<<DataSource>>> is provided for dependency injection via a {{{/apidocs/net/officefloor/frame/spi/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} implementation.
  
Code

  The following is the <<<main>>> method to run the application.

%{code-snippet|sh-params=highlight:[13,14,15,16]|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/databasehttpserver/DatabaseHttpServer.java}

  The highlighted lines is the code to configure a <<<DataSource>>> for dependency injection.  The <<<DataSource>>> is provided by a {{{/apidocs/net/officefloor/frame/spi/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} implementation for a <<<DataSource>>> instance.  
  
  Objects to be dependency injected within OfficeFloor are made available by {{{/apidocs/net/officefloor/frame/spi/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} implementations.  Many dependency injection frameworks are based solely on the object's <<<Class>>> and its necessary dependency injection configuration.  OfficeFloor goes beyond this by providing more capabilities to the object such as invoking {{{/apidocs/net/officefloor/frame/spi/managedobject/source/ManagedObjectExecuteContext.html}processes}}.  For example the socket listener within the HTTP Server is actually an {{{/apidocs/net/officefloor/plugin/socket/server/http/source/HttpServerSocketManagedObjectSource.html}HttpServerSocketManagedObjectSource}} which invokes a task to service the HTTP request.  The {{{/apidocs/net/officefloor/plugin/managedobject/clazz/ClassManagedObjectSource.html}ClassManagedObjectSource}} is available to provide the instantiated object for dependency injection.

  The properties file for configurating the <<<DataSource>>> is: 

%{code-snippet|brush=plain|file=${basedir}/src/main/resources/datasource.properties}

  This allows for the configuration of the application to be within properties file rather than code.  The reason is that different properties files can be used in different environments to allow environment specific configuration.  

  For completeness, the creation of the database is as follows:

%{code-snippet|sh-params=first-line:21|brush-autodetect=1|id=createDatabase|file=${basedir}/src/main/java/net/officefloor/example/databasehttpserver/DatabaseHttpServer.java}

  
* Template.ofp

  The following is the content of the template: 

%{code-snippet|sh-params=highlight:[13]|brush=xml|file=${basedir}/src/main/resources/Template.ofp}

  Notice the combination of <<< #\{link\} >>> and <<< $\{tag\} >>> to provide a parameterised link to delete the particular row.


* Template class

  The <<<Row>>> array instances are provided by the following method:

%{code-snippet|brush-autodetect=1|id=getRows|file=${basedir}/src/main/java/net/officefloor/example/databasehttpserver/Template.java}

  As the method is matched to the template by naming convention (template section name, <<<Rows>>>, prefixed with <<<get>>>), the parameters identify the necessary dependencies for the method.  In this case the only dependency is the <<<DataSource>>> which is provided by the {{{/apidocs/net/officefloor/frame/spi/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} implementation configured within the <<<main>>> method above.
  
  The {{{/apidocs/net/officefloor/plugin/autowire/AutoWireOfficeFloorSource.html}AutoWireOfficeFloorSource}} nature of the {{{/apidocs/net/officefloor/plugin/web/http/server/HttpServerAutoWireOfficeFloorSource.html}HttpServerAutoWireOfficeFloorSource}} has the dependencies automatically wired together based on type to simplify configuration.  Auto-wiring dependencies based on type is adequate (and much easier) for the majority of applications.  OfficeFloor does provide eclipse IDE plug-ins to enable more controlled configuration via graphically wiring in dependencies.  This {{{../../eclipse/graphical-configuration.html}graphical configuration}} provides configuration that is executable documentation of the application however is beyond the scope of this example.
  
  The handling of <<< #\{addRow\} >>> submission is via the following method.  This again is matched to the template via naming convention (same name).

%{code-snippet|sh-params=first-line:25|brush-autodetect=1|id=addRow|file=${basedir}/src/main/java/net/officefloor/example/databasehttpserver/Template.java}

  The method requires two parameters.  The <<<DataSource>>> is provided as above.  The <<<Row>>> is actually also provided via a <<<ManagedObjectSource>>>.
  
  The {{{/apidocs/net/officefloor/plugin/web/http/parameters/source/HttpParametersObjectManagedObjectSource.html}HttpParametersObjectManagedObjectSource}} within the <<<main>>> method above configures in the <<<Row>>> dependency.  This <<<ManagedObjectSource>>> is actually dependent on the {{{/apidocs/net/officefloor/plugin/socket/server/http/source/HttpServerSocketManagedObjectSource.html}HttpServerSocketManagedObjectSource}} to obtain the form parameters on the HTTP request and instantiates the <<<Row>>> object loading in the <<<name>>> and <<<description>>> values.  OfficeFloor manages this dependency requiring a further dependency so that you need only to focus on implementing the method's functionality.
  
  The delete row functionality is similar to add functionality.

%{code-snippet|sh-params=first-line:41|brush-autodetect=1|id=deleteRow|file=${basedir}/src/main/java/net/officefloor/example/databasehttpserver/Template.java}

  After the method (add or delete) is executed, the template is rendered again for the response back to the client.  This means that the <<<getRows(...)>>> method is executed again to display the changes within the table.

* Remaining classes

  For completeness of the example the <<<Row>>> class is included below.

** Row class

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/databasehttpserver/Row.java}


Unit Test

  The unit test requests the page and then adds a row and deletes a row.

%{code-snippet|brush-autodetect=1|id=test|file=${basedir}/src/test/java/net/officefloor/example/databasehttpserver/DatabaseHttpServerTest.java}

