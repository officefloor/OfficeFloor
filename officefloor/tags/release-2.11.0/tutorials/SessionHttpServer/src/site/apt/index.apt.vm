                                               -----------------------
                                             Session HTTP Server Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Session Http Server Tutorial>>

  This tutorial demonstrates maintaining state within the HTTP session.
  
  The example application for this tutorial will show a simple list of postings as follows:
  
[./images/SessionHttpServer-screenshot.png] SessionHttpServer screen shot.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/SessionHttpServer/${projectVersion}/SessionHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}


  
Template.woof.html

  The template for displaying the posts and adding posts is as follows:

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.woof.html}

  This is similar HTML as per previous tutorials.



@HttpSessionStateful

  Session objects within WoOF are dependency injected.  The following shows the <<<@HttpSessionStateful>>> annotation necessary to identify the dependency as a HTTP session bound object.  Note HTTP session objects must also be serializable.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/sessionhttpserver/TemplateLogic.java}

  WoOF will do the following:
  
    [[1]] Check the HTTP Session to see if the object is previously bound.  If so it uses the bound object.
    
    [[1]] If not bound, the object is instantiated by its default constructor and bound to the HTTP Session.  It is then used.
    
  The dependency injection provides compile safe code without requiring to:
  
   * retrieve the object via a string identifier from the HTTP session
   
   * having to cast the object to its specific type
  
  WoOF will provide a unique name based on the object's type to bind the object within the HTTP session.  This can however be overridden by providing a name to the annotation.



Unit Test

  WoOF again allows easy unit testing by it's dependency injection into methods:
  
%{code-snippet|brush-autodetect=1|id=pojo|file=${basedir}/src/test/java/net/officefloor/tutorial/sessionhttpserver/SessionHttpServerTest.java}



Next

  The {{{../ExceptionHttpServer/index.html}next tutorial}} looks at exception handling.
