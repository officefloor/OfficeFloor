
TODO: link from SEDA
TODO: link from Inversion of Control



{{Infobox Software
| name                   = OfficeFloor
| logo                   = 
| screenshot             = 
| caption                = True inversion of control for building simple static to complex real-time web applications that are build once run anywhere - even with Cloud Computing
| developer              = 
| latest release version = 2.3.0
| latest release date    = {{release date|2012|07|07}}
| operating system       = [[Cross-platform]]
| platform               = [[Java Virtual Machine]]
| programming language   = [[Java (programming language)|Java]]
| genre                  = [[Web application framework]]
| license                = [[GPL]]
| website                = http://www.officefloor.net
}}

'''OfficeFloor''' is an [[application framework]] that combines concepts from [[inversion of control]] with stages inspired by the [[staged event-driven architecture]].

The framework
* segments to the application functionality into jobs
* each job defines its dependencies for dependency injection (via [[inversion of control]])
* jobs are executed by particular thread pools (stage) based on their dependencies

== Example ==

An example benefit to utilising dependencies to classify jobs would be the following jobs to service a HTTP request:

{| class="wikitable"
|-
! Step !! Job !! Dependencies
|-
| 1 || Receive and parse the HTTP request || Socket
|-
| 2 || Route HTTP Request to servicing resource || HTTP Request
|-
| 3 || Service via interaction with database || HTTP Request & Database Connection
|-
| 4 || Render response || Socket
|}

To service requests efficiently, two thread pools are configured:

{| class="wikitable"
|-
! Thread Pool !! Description
|-
| Database focused Thread Pool || Thread pool with number of threads matching available database connections to service any job with a Database Connection dependency
|-
| CPU focused Thread Pool  || Default thread pool containing a thread per CPU to service remaining jobs
|}

As jobs for steps 1, 2, 4 do not have a Database Connection they are serviced by the CPU focused Thread Pool.  Due to the thread count of this thread pool matching the number of CPUs and no blocking I/O occurring within the jobs (as identified by dependencies) the jobs are efficiently serviced with little Thread context switching.

The job for step 3 is serviced by the Database Connection focused Thread Pool.  As the respective Database focused Thread Pool has thread count matching connections it efficiently services jobs without significant lock contention in retrieving Database Connection resources.

The effect is multiple thread pools servicing a request that are tuned to the particular jobs of the request they are servicing.


= WoOF (Web on OfficeFloor) =
WoOF, deriving its name from the acronym of Web On OfficeFloor, is a [[web application framework]] that utilises the OfficeFloor framework and focuses on separation of web page design from web page code. WoOF addresses concerns of a complex programming model arising from stages ([[staged event-driven architecture]]) to provide a simple web programming model for developers.

== Web Page Tags ==
WoOF dynamic web pages use the following non-obtrusive tags:

* ${bean ... $} , ${property} : tags to render dynamic content from [[Plain Old Java Object | POJO]]s
* #{link} : replaced with web page links to enable graphical configuration of the web site navigation
* <nowiki><!-- {section} --></nowiki> : segments the web page into functions

The non-obtrusive tags enable integration with [[WYSIWYG]] web design tools (e.g. [[DreamWeaver]], [[KompoZer]]) to create and edit the web pages.


== Web Page Logic ==
The application logic is written with [[Plain Old Java Object | POJO]]s that are via [[Inversion of Control]] injected as parameters into the methods (jobs for underlying OfficeFloor framework).

WoOF also provides simplified integration with [[Google Web Toolkit]] so that the AJAX rich user web page experience can be written in Java. This keeps all code in the one programming language for development and support.


== Connecting Web Page design with Web Page Logic ==
The web pages and [[Plain Old Java Object | POJO]] methods are connected together via matching on tag name to method name.

Navigation flow of WoOF web applications is via graphical configuration.


== References ==
{{Reflist}}

Article/Paper being published shortly to provide performance comparisons against thread-per-request and NIO / IO solutions.


== External links ==
* [http://officefloor.net/ OfficeFloor Web Site]
* [http://marketplace.eclipse.org/content/officefloor Eclipse Plug-in]
* [http://officefloor.net/tutorials/index.html Tutorials]
* [http://freecode.com/projects/officefloor Releases]
* [http://sourceforge.net/projects/officefloor SourceForge Page]

{{DEFAULTSORT:OfficeFloor}}
[[Category:Web application frameworks]]
[[Category:Cross-platform software]]
