                                               -----------------------
                                          WoOF integration with JSP Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<WoOF integration with JSP Tutorial>>

  This tutorial demonstrates integrating WoOF with existing Java Server Pages (JSP).
  
  Integration occurs by registering and using objects within the <<<HttpServletRequest>>>, <<<HttpSession>>> and <<<ServletContext>>>.  
  
  The tutorial will provide a simple page that renders a text property from an object registered in each context respectively.  The following shows the resulting pages.

  <<WoOF page>>

[./images/ServletFilterJspIntegration-woof-screenshot.png] WoOF screen shot.

  <<JSP>>

[./images/ServletFilterJspIntegration-jsp-screenshot.png] JSP screen shot.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/WoofServletJspIntegration/${projectVersion}/WoofServletJspIntegration-${projectVersion}-project.zip/download}Download Tutorial Source}}



Objects

  The following are the objects being registered as attributes for integration.  The objects have been deliberately kept simple to focus on integration.
  
  The annotations on the objects will be explained later.

* RequestBean

  The following bean is registered in the <<<HttpServletRequest>>>.

%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/woofservletjspintegration/RequestBean.java}

* SessionBean

  The following bean is registered in the <<<HttpSession>>>.

%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/woofservletjspintegration/SessionBean.java}

* ApplicationBean

  The following bean is registered in the <<<ServletContext>>>.

%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/woofservletjspintegration/ApplicationBean.java}



Templates

  The following illustrates the necessary JSP to render the three beans' text property to the page:

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.jsp}

  The equivalent WoOF template is as follows:

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.woof.html}

  WoOF focuses on minimising the impact to the HTML.  It enables this light instrumentation of the HTML by having a POJO (plain old java object) provide the dynamic logic for the web page rendering.  The {{{./index.html}other tutorials}} contain further details.  
  
  The following is the template logic class for the above WoOF template.
  
%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/woofservletjspintegration/TemplateLogic.java}


  The configuration of WoOF occurs graphically and is as follows.
    
[./images/ServletFilterJspIntegration-woof.png] application.woof.



Integration

  The above has already integrated WoOF with the JSP.
  
  The integration is by the annotations on the objects.  The annotations are flags to WoOF to find the object within the respective context by the specified name.  Should the object not be registered it is instantiated and registered within the respective context.  The dependency injection of the underlying OfficeFloor framework handles this logic.  This results in the following.
  
*-------------------+---------------------------------+---------------------------------------------+---------------------------------------------------------------------+
|| Bean             || Context Access                                      || WoOF access                                                       || JSP access 
*-------------------+---------------------------------+---------------------------------------------+---------------------------------------------------------------------+
| RequestBean       | <<<HttpServletRequest.getAttribute("RequestBean")>>> | Method parameter annotated with @HttpRequestStateful("RequestBean") | Used directly in web page via <<< <jsp:useBean id="RequestBean" scope="request" class="net.officefloor.tutorial.woofservletjspintegration.RequestBean" /> >>> and then <<< <jsp:property name="RequestBean" property="text" /> >>> 
*-------------------+---------------------------------+---------------------------------------------+---------------------------------------------------------------------+
| SessionBean       | <<<HttpSession.getAttribute("SessionBean")>>>        | Method parameter annotated with @HttpSessionStateful("SessionBean") | Used directly in web page via <<< <jsp:useBean id="SessionBean" scope="session" class="net.officefloor.tutorial.woofservletjspintegration.SessionBean" /> >>> and then <<< <jsp:property name="SessionBean" property="text" /> >>>
*-------------------+---------------------------------+---------------------------------------------+---------------------------------------------------------------------+
| ApplicationBean   | <<<ServletContext.getAttribute("ApplicationBean")>>> | Method parameter annotated with @HttpApplicationStateful("ApplicationBean") | Used directly in web page via <<< <jsp:useBean id="ApplicationBean" scope="application" class="net.officefloor.tutorial.woofservletjspintegration.ApplicationBean" /> >>> and then <<< <jsp:property name="ApplicationBean" property="text" /> >>>
*-------------------+---------------------------------+---------------------------------------------+---------------------------------------------------------------------+

  The integration works both ways also.  The <<<ApplicationBean>>> does not have its value set by the WoOF template logic object.  The value is specified by the following <<<ServletContextListener>>> on start-up.

%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/woofservletjspintegration/SetupListener.java}

  As the above <<<ServletContextListener>>> registers the <<<ApplicationBean>>> within the <<<ServletContext>>>, WoOF will obtain this object in rendering the web page and therefore have the <<<text>>> property already specified.



web.xml

  For completeness of this tutorial the <<<web.xml>>> is as follows.

%{code-snippet|brush-autodetect=1|file=${basedir}/src/main/webapp/WEB-INF/web.xml}



Unit Test

  The unit test highlights the servicing of a request by:
  
   * WoOF template
  
   * JSP

%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/woofservletjspintegration/JspIT.java}


Next

  The {{{../WoofServletDependencyInjection/index.html}next tutorial}} looks at making use of JEE Servlet dependencies (e.g. EJBs).

