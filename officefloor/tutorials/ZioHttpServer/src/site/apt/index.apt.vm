~~~
~~ #%L
~~ ZIO Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~

                                               -----------------------
                                                    ZIO Tutorial 
                                               -----------------------
					                            Daniel Sagenschneider
                                               -----------------------

ZIO Tutorial

  This tutorial demonstrates using {{{https://zio.dev}ZIO}}.

  To focus on ZIO, this tutorial uses a simple application that retrieves a message from database via ZIO effect. 

  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/ZioHttpServer}Tutorial Source}}



*ZIO

  The ZIO effect to retrieve a message from the database is the following:
  
%{snippet|id=tutorial|file=${basedir}/src/main/scala/net/officefloor/tutorial/ziohttpserver/MessageService.scala|ignoreDownloadError=false}

  with the following environment:
  
%{snippet|id=tutorial|file=${basedir}/src/main/scala/net/officefloor/tutorial/ziohttpserver/InjectMessageRepository.scala|ignoreDownloadError=false}
  
  The effect is tested with the following code:
  
%{snippet|id=tutorial|file=${basedir}/src/test/scala/net/officefloor/tutorial/ziohttpserver/MessageServiceTest.scala|ignoreDownloadError=false}
  
  Note: the test is not comprehensive, however, demonstrates testing the ZIO effect.
  
  
  
*Servicing Request with ZIO

  To integrate ZIO into a {{{https://sagenschneider.blogspot.com/2019/11/first-class-procedure-type-system-for.html}First-Class Procedure}} add the following to the <<<pom.xml>>>:
  
%{snippet|id=tutorial|file=${basedir}/pom.xml|ignoreDownloadError=false}
  
  This will setup the configured procedures to handle the returned ZIO from functions.
  
  As ZIO environments provide dependency injection, the OfficeFloor injected dependencies need to be mapped onto the required ZIO environment.  The following function demonstrates the mapping:
  
%{snippet|id=service|file=${basedir}/src/main/scala/net/officefloor/tutorial/ziohttpserver/ServiceLogic.scala|ignoreDownloadError=false}
     
  This function is configured into a procedure.  The ZIO handling by OfficeFloor then:
  
   [[1]] Identifies a ZIO is returned from the function
   
   [[1]] Confirms the ZIO does not require a custom environment.  As above, environment needs to be provided from injected dependencies
   
   [[1]] Unsafely runs the returned ZIO
   
   [[1]] Provides the success as parameter to next procedure.  Or throws any exception to be handled by configured OfficeFloor exception handlers
   
  This allows ZIO to be used for writing modular functions of the application.  Then lets OfficeFloor compose these functions graphically together to form the application.
  
  As per the WoOF configuration of the application:
  
[./images/ZioHttpServer-configuration.png] ZioHttpServer screen shot.
  
  The next configured procedure sends the message response:
  
%{snippet|id=send|file=${basedir}/src/main/scala/net/officefloor/tutorial/ziohttpserver/ServiceLogic.scala|ignoreDownloadError=false}
  


*Repository injected from Spring

  To complete the code of the application, a repository implementation is required.  Given the repository needs to be dependency injected, the implementation of the repository is via Spring:
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/ziohttpserver/MessageRepository.java|ignoreDownloadError=false}
  
  See the {{{../TransactionHttpServer/index.html}Transaction Tutorial}} for further information on configuring Spring repositories.



*Testing

  The following test demonstrates using ZIO to service a HTTP request:
  
%{snippet|id=tutorial|file=${basedir}/src/test/scala/net/officefloor/tutorial/ziohttpserver/ZioHttpServerTest.scala|ignoreDownloadError=false}



Next

  The {{{../ConstantCacheHttpServer/index.html}next tutorial}} covers simple caching.
