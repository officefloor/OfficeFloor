~~~
~~ #%L
~~ Embedding WoOF within HttpServlet container
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~

                                               -----------------------
                                             Servlet Container Integration 
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Servlet Container Tutorial

  This tutorial demonstrates the ease of embedding a WoOF application into a Servlet container.  This is typically necessary to run with PaaS Cloud providers.
  
  The tutorial will demonstrate this with a simple increment service. 
  
  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/HttpServletHttpServer}Tutorial Source}}



*Configuring for Servlet container

  To run within a Servlet container, add the following dependency:
  
%{snippet|id=dependency|file=${basedir}/pom.xml|ignoreDownloadError=false}

  Then package the application as a <<<war>>> to enable being deployed to Servlet container.
  
  Note that WoOF will run as a <<<Filter>>> and only intercept requests it can handle.  This means existing Servlet functionality can work side by side with WoOF.  Very useful for phased migration of existing Servlet applications to WoOF.
  
  Also, WoOF does not do class path scanning.  Therefore, the start times are very fast.  This makes WoOF ideal for scale to zero PaaS deployments. See the {{{https://officefloor.appspot.com/}OfficeFloor Subscription App}} for an example (code also available {{https://github.com/officefloor/Subscription}}).



*Integration Test

  The following integration test has the project started as follows:
  
%{snippet|id=run|file=${basedir}/pom.xml|ignoreDownloadError=false}

  This will allow the following integration test to call the WoOF application within the Servlet container to increment the value:
  
%{snippet|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/httpservlet/OfficeFloorFilterIT.java|ignoreDownloadError=false}

  

Next

  The {{{../RestHttpServer/index.html}next tutorial}} covers REST.

