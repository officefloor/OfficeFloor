~~~
~~ #%L
~~ Thread Affinity Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~

                                               -----------------------
                                               Thread Affinity Tutorial 
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Thread Affinity Tutorial

  
  This tutorial looks at configuring an {{{/apidocs/net/officefloor/frame/api/executive/source/ExecutiveSource.html}ExecutiveSource}} to provide thread affinity for a web application.

  To demonstrate the thread affinity, the following simple application is used.

[./images/threadaffinity-screenshot.png] Thread Affinity screen shot.

  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/ThreadAffinityHttpServer}Tutorial Source}}


  
*Thread Affinity

  Thread affinity binds the thread to only run on a particular CPU core.  The advantage of using thread affinity is that it can increase the CPU cache hits, as the thread will always be run on a particular core.  Increasing CPU cache hits reduces bus contention and improves performance of processing.
  
  However, thread affinity is not a silver bullet to improving performance.  There can be circumstances of cache sizes increasing causing the cache hits to drop.  However, in many cases it can provide an increased boost in performance to your applications.
  
  Always performance test to ensure thread affinity is providing your application the increased CPU cache hits and subsequent increased performance.


{{{/apidocs/net/officefloor/web/executive/WebThreadAffinityExecutiveSource.html}WebThreadAffinityExecutiveSource}}

  Thread affinity is not straight forward to implement.  However, OfficeFloor makes it simple via the {{{/apidocs/net/officefloor/web/executive/WebThreadAffinityExecutiveSource.html}WebThreadAffinityExecutiveSource}} (that uses {{{https://github.com/OpenHFT/Java-Thread-Affinity}OpenHFT}}).
  
  <<Please ensure you follow the instructions on {{{https://github.com/OpenHFT/Java-Thread-Affinity}OpenHFT}} to install the necessary native libraries for thread affinity to work.>>
  
  Then simply include the following on the class path:
  
%{snippet|id=tutorial|file=${basedir}/pom.xml|ignoreDownloadError=false}

  This will set up thread affinity for:
  
   - HTTP servicing threads
   
   - all teams (each team is split to run across the CPU cores with their threads bound to a particular core)
   
  The result of this is that the web request is serviced entirely on one CPU core.  This allows for improved CPU cache hits even if you require multiple threads (teams) to service the request.  All threads for servicing the request will be bound to the same CPU core.  This subsequently, in many cases, boosts your application performance - as each CPU core can act like it's own server without having to have <heavy weight> synchronising between the cores slowing application performance.



*Proving the Thread Affinity

  The tutorial outputs the name of the thread at the top of the page.  The thread name is comprised of:
  
   [[1]] The naming of the bound dependency

   [[1]] The CPU core that the thread is bound

   [[1]] Index of the thread within the thread pool
   
  As the invoking thread is bound to a CPU core on triggering the mock request, running the request multiple times should always have the same CPU core.
  
  The following test demonstrates the same CPU core always servicing the request.
  
%{snippet|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/threadaffinityhttpserver/ThreadAffinityHttpServerTest.java|ignoreDownloadError=false}



*ExecutiveSource
  
  For further details on how you can control threads within an application see the {{{/apidocs/net/officefloor/frame/api/executive/source/ExecutiveSource.html}ExecutiveSource}}.  It is beyond this tutorial to explain it's full capabilities, however it is geared to following how the executives would manage personal in an office.



Next

  The {{{../KotlinHttpServer/index.html}next tutorial}} covers Kotlin.
