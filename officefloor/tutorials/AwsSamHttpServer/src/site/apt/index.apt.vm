~~~
~~ #%L
~~ AWS SAM Tutorial
~~ %%
~~ Copyright (C) 2005 - 2021 Daniel Sagenschneider
~~ %%
~~ This program is free software: you can redistribute it and/or modify
~~ it under the terms of the GNU Affero General Public License as published by
~~ the Free Software Foundation, either version 3 of the License, or
~~ (at your option) any later version.
~~ 
~~ This program is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of
~~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~ GNU General Public License for more details.
~~ 
~~ You should have received a copy of the GNU Affero General Public License
~~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
~~ #L%
~~~

                                               -----------------------
                                                  AWS SAM Tutorial 
                                               -----------------------
					                            Daniel Sagenschneider
                                               -----------------------

AWS SAM Tutorial

  This tutorial demonstrates running within {{{https://aws.amazon.com/serverless/}AWS Serverless}}.

  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/AwsSamHttpServer}Tutorial Source}}



*AWS SAM

  {{{https://aws.amazon.com/serverless/sam/}AWS SAM}} is supported by OfficeFloor through the following plugin:
  
%{snippet|id=sam|file=${basedir}/pom.xml|ignoreDownloadError=false}

  The only additional configuration is AWS SAM requiring the application be shaded as follows:
  
%{snippet|id=shade|file=${basedir}/pom.xml|ignoreDownloadError=false}



*Running Locally

  Running the AWS SAM application locally typically requires setting up a docker network, running DynamoDB and then starting SAM locally.  To ease running and testing the application, the following plugin is available:

%{snippet|id=integration|file=${basedir}/pom.xml|ignoreDownloadError=false}

  Note that the SAM <<<template.yaml>>> file is created by the plugin if it does not exist.  Hence, once the file is generated, it is possible to make manual alterations and check it into source control.

  The application may then be manually started with the following:

+-----------------------------------------+


    mvn officefloor-sam:run


+-----------------------------------------+
  


*Deploying to AWS

  The AWS provided {{{https://github.com/aws/aws-sam-cli}SAM CLI}} may be used for deploying the application to AWS.  In this case:

+-----------------------------------------+


    sam deploy --guided


+-----------------------------------------+



*Testing

  The functionality can be tested just like any other Web on OfficeFloor (WoOF) application:
  
%{snippet|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/awssamhttpserver/AwsSamHttpServerTest.java|ignoreDownloadError=false}

  To test within the SAM local server, use integration testing.  The <<<officefloor-sam-maven-plugin>>> above sets up the application running within a SAM local server.  It also sets up a local DynamoDB.  This enables the following integration testing:

%{snippet|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/awssamhttpserver/AwsSamHttpServerIT.java|ignoreDownloadError=false}

  Note that a different DynamoDB extension is used for each type of testing:
  
   * {{{/apidocs/net/officefloor/nosql/dynamodb/test/DynamoDbExtension.html}DynamoDbExtension}} for unit tests to set up and connect to DynamoDb
   
   * {{{/apidocs/net/officefloor/nosql/dynamodb/test/DynamoDbConnectExtension.html}DynamoDbConnectExtension}} for integration tests to connect to DynamoDb started by the <<<officefloor-sam-maven-plugin>>>



Next

  The {{{../CosmosDbHttpServer/index.html}next tutorial}} covers the {{{https://docs.microsoft.com/azure/cosmos-db/}CosmosDB}} client.
