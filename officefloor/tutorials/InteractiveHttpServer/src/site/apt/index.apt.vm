~~~
~~ #%L
~~ Interactive HTTP Server Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~

                                               -----------------------
                                            Interactive HTTP Server Tutorial 
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Interactive HTTP Server Tutorial
  
  This tutorial looks at handling a form submission.
  
  The below example for this tutorial will implement a simple form submission.  The form submission will validate a name was entered and provide a message if successfully entered.
  
  The simple form for this tutorial is as follows:
    
[./images/InteractiveHttpServer-screenshot.png] InteractiveHttpServer screen shot.
  
  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/InteractiveHttpServer}Tutorial Source}}
  


*Template.woof.html

  The below is the content of the <<<Template.woof.html>>>.

%{snippet|file=${basedir}/src/main/resources/Template.woof.html|ignoreDownloadError=false}

  The difference to previous tutorials is that the HTTP method is qualified in the link.  This configures WoOF to handle the POST method in this case.  This is used to specify handling of various other HTTP methods (useful for REST interaction with the server).
  
  The default handling for unqualified links is both GET and POST.  This is to support common use cases of link navigation and form submissions. 



*TemplateLogic Class

  The logic to handle the form submission is the following:
  
%{snippet|id=class|file=${basedir}/src/main/java/net/officefloor/tutorial/interactivehttpserver/TemplateLogic.java|ignoreDownloadError=false}

  The aspects to notice are:
  
    * the method <<<handleSubmission()>>> matches in name to the <<<#\{handleSubmission\}>>> of the HTML form action.  As the names are the same, WoOF will reflectively invoke the method to handle the form submission.  By default WoOF will re-render the page after the method completes.  Later tutorials will look at controlling navigation to other pages. 
    
    * the <<<Parameters>>> inner class is annotated with <<<@HttpParameters>>>.  As this is dependency injected into the form handling method, WoOF sees the annotation and will construct an instance of the object by its default constructor and load the HTTP parameters to its setter methods by corresponding names (e.g. <<<name>>> to <<<setName(String name)>>>).  Note that this object is constructed once for each HTTP request so is the same object dependency injected into the <<<getTemplateData(...)>>> method - allowing entered values to be re-rendered to the page.
    
    * the <<<Parameters>>> inner class is serializable.  By default WoOF will undertake the {{{http://en.wikipedia.org/wiki/Post/Redirect/Get}Post/Redirect/Get}} pattern after the <<<handleSubmission()>>> method completes and before the template is re-rendered.  To enable the state of the <<<Parameters>>> object to be available across the redirect, it is added to the {{{/apidocs/net/officefloor/web/session/HttpSession.html}HttpSession}} and subsequently must be serializable.
  
  OfficeFloor achieves this simple interactive programming model by substituting into the rendered page a unique URL which it can map back to the corresponding method.  The method is matched by its name and is free to have any parameters it requires (enabled by OfficeFloor's continuation injection and dependency injection).  For example in more complex applications the handling methods may include a parameter for a <<<DataSource>>> or <<<EntityManager>>> to enable database interaction rather than just providing a message back to the client.  Later tutorials will explain how to inject further dependencies.



*Unit Test

  The unit test requests the various URL's exposed from the template.

%{snippet|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/interactivehttpserver/InteractiveHttpServerTest.java|ignoreDownloadError=false}



Next

  The {{{../SessionHttpServer/index.html}next tutorial}} looks at storing state between requests within a HTTP session.
