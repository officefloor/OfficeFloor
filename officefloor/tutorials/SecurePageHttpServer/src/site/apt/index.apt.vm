~~~
~~ #%L
~~ Secure page HTTP Server Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~

                                               -----------------------
                                                 Secure Page Tutorial 
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Secure Page Tutorial
  
  This tutorial looks at configuring a page to only be accessed via a secure channel (HTTPS).
  
  The below example for this tutorial will implement a simple page to capture card details.  The simple page for this tutorial is as follows:
    
[./images/SecurePageHttpServer-screenshot.png] SecurePageHttpServer screen shot.
  
  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/SecurePageHttpServer}Tutorial Source}}



*Secure Page

  To configure the page to always be accessed via a secure channel, the following is the configuration for the page:
  
[./images/SecurePageHttpServer-configuration.png] Secure Page configuration screen shot.

  Checking the secure check box is the only configuration necessary to ensure use of a secure channel (HTTPS) for accessing the page.
  
  To ease development, WoOF by default runs with a generic security key that is self signed.  Typically for development and testing this will require trusting the key within the browser to access the page.  This default setup should only be used for development/testing to avoid manual key setup.
  
  For production, a trusted third-party signed security key is recommended to be configured.
  
  Please also see the {{{/apidocs/net/officefloor/server/http/HttpServerLocation.html}HttpServerLocation}} for details on configuring the web application's location for generation of the link URLs.



*Template

  The page template content is as follows:

%{snippet|file=${basedir}/src/main/resources/card.woof.html|ignoreDownloadError=false}

  This is similar HTML to previous tutorials.



*Logic Class

  The logic for the page is the following:
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/securepagehttpserver/CardLogic.java|ignoreDownloadError=false}

  Again this is similar to previous tutorials.



*Remaining Code

  The main page is included for completeness of the tutorial code.
  
%{snippet|file=${basedir}/src/main/resources/main.woof.html|ignoreDownloadError=false}



*Unit Test

  The unit test requests the page:
  
   * directly
   
   * via a link from another page
   
  The exception within the page logic ensures rendering the response only occurs over a secure channel (HTTPS).

%{snippet|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/securepagehttpserver/SecurePageTest.java|ignoreDownloadError=false}



Next

  The {{{../SecureLinkHttpServer/index.html}next tutorial}} looks at securing a specific link.

