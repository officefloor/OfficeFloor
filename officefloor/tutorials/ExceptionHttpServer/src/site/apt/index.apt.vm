~~~
~~ #%L
~~ Exception handling HTTP Server Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~

                                               -----------------------
                                             Exception Handling Tutorial 
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Exception Handling Tutorial

  This tutorial demonstrates the ease in handling exceptions within an WoOF web application.
  
  The tutorial will demonstrate this by a template method throwing an exception that is handled by writing the exception to <<<stderr>>>.  Though this is a simple example it does demonstrate the ease of handling exceptions.
  
  This tutorial also introduces the <<<@Parameter>>> annotation to allow passing an object between methods.

  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/ExceptionHttpServer}Tutorial Source}}



*Template throwing exception

  The following is the template:
  
%{snippet|file=${basedir}/src/main/resources/Template.woof.html|ignoreDownloadError=false}

  with the logic throwing the exception:
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/exceptionhttpserver/TemplateLogic.java|ignoreDownloadError=false}

  Pressing the submit button will trigger the exception to be thrown.  
  
  The tutorial will demonstrate the ease in which this exception can be handled.
  


*Exception handling configuration
  
  The following shows the configuration for handling the above template exception.
  
[./images/ExceptionHttpServer-configuration.png] ExceptionHttpServer screen shot.

  The exception is linked to be handled by the following:
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/exceptionhttpserver/ExceptionHandler.java|ignoreDownloadError=false}
  
  Once the handling method completes it follows normal WoOF behaviour.  In other words, the static error page is then sent to the client.



*@Parameter
  
  The <<<@Parameter>>> annotation identifies a value to be passed from the previous method.
  
  The handling of an exception is actually via OfficeFloor functionality.  The exception is caught by WoOF and passed as a parameter to the configured method.  In this case, the <<<handleSqlException(...)>>> method.
  
  The <<<@Parameter>>> annotation can also be used to obtain the value from the following:
  
   * receive the exception being handled (as in above example)
  
   * return value from the previous method
   
   * parameter to a <<<@FlowInterface>>> method
   
  This functionality is useful and provided by the underlying OfficeFloor framework.  However, within WoOF the necessity to pass parameters is used typically only for exception handling.  The use of dependency injected objects is often a better way to pass state between methods (i.e. {{{/apidocs/net/officefloor/web/HttpRequestStateful.html}HttpRequestStateful}}).



*Resource
  
  The remaining configuration indicates that the following static response should be sent.
  
%{snippet|file=${basedir}/src/main/resources/PUBLIC/Error.html|ignoreDownloadError=false}

  It is possible to use the details of the exception within a template to generate a response.  However, for simplicity a static resource is used.



*Unit Test

  The following unit test shows the exception handling by listening in on <<<stderr>>> to ensure the exception message is written to it:
  
%{snippet|id=handle|file=${basedir}/src/test/java/net/officefloor/tutorial/exceptionhttpserver/ExceptionHttpServerTest.java|ignoreDownloadError=false}

  JUnit 4 example:

%{snippet|id=handle|file=${basedir}/src/test/java/net/officefloor/tutorial/exceptionhttpserver/ExceptionHttpServerJUnit4Test.java|ignoreDownloadError=false}
  

Next

  The {{{../DiPojoHttpServer/index.html}next tutorial}} covers dependency injection.
