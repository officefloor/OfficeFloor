~~~
~~ #%L
~~ JavaScript Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ This program is free software: you can redistribute it and/or modify
~~ it under the terms of the GNU Affero General Public License as published by
~~ the Free Software Foundation, either version 3 of the License, or
~~ (at your option) any later version.
~~ 
~~ This program is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of
~~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~ GNU General Public License for more details.
~~ 
~~ You should have received a copy of the GNU Affero General Public License
~~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
~~ #L%
~~~

                                               -----------------------
                                             JavaScript Polyglot Tutorial 
                                               -----------------------
					                            Daniel Sagenschneider
                                               -----------------------

JavaScript Polyglot Tutorial

  This tutorial demonstrates using JavaScript within WoOF.

  The use of JavaScript in this tutorial will be to validate the request.  This allows JavaScript in a single page application to be re-used on the server.  In other words, validation rules used to confirm correctly entered information can be re-used server side to ensure correct defensive checks regarding the data sent.  This avoids having to recode and maintain two separate sets of validation rules in different languages.

  The configuration of the tutorial is as follows:

[./images/JavaScriptHttpServer-configuration.png] JavaScriptHttpServer screen shot.
   
  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/JavaScriptHttpServer}Tutorial Source}}



*Enable JavaScript

  To enable using JavaScript, add the following:
  
%{snippet|id=tutorial|file=${basedir}/pom.xml|ignoreDownloadError=false}



*JavaScript

  The JavaScript to validate the request is as follows:
  
%{snippet|file=${basedir}/src/main/resources/net/officefloor/tutorial/javascripthttpserver/Validate.js|ignoreDownloadError=false}

  The representation of the JavaScript function is very similar to Java methods.
  
  However, due to lack of type information, the meta-data for the JavaScript function must be defined.  The <<<officefloor>>> object configured against the function provides this meta-data.  Please see the JavaScript {{{https://github.com/officefloor/OfficeFloor/blob/master/officefloor/polyglot/script/officejavascript/src/test/resources/javascript/Functions.js}polyglot tests}} for the various configurations.
  
  Note: once the {{{http://www.graalvm.org}graal.js}} script engine supports decorators, the configuration will be updated to <<<@OfficeFloor>>> decorator to have similar look to Java for consistency.



*Send Response

  Now that the JavaScript has validated the request, the response can be sent:
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/javascripthttpserver/ResponseLogic.java|ignoreDownloadError=false}

  This demonstrates providing polyglot solutions with OfficeFloor.



*Note on scripting and threading
  
  As the JavaScript script engine requires single threads, an engine is created per thread.
  
  This does not cause state sharing problems, as all state is injected into the JavaScript function.  However, if you do decide to cache state within the script, be aware that there may be more than one script engine running.
  
  Also, as a script engine is created per thread this can push up memory.  For validation (as per this tutorial), the engines run on the socket listener threads.  Therefore, there is only going to be an engine per CPU (following one socket listener thread per CPU).  However, be aware that using JavaScript later in the application when handled by other {{{/apidocs/net/officefloor/frame/api/team/Team.html}Team}} instances, that number of engines can increase causing additional memory.



*Testing

  The following shows the JavaScript validation rejecting an invalid request and allowing a valid request:
  
%{snippet|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/javascripthttpserver/JavaScriptHttpServerTest.java|ignoreDownloadError=false}



Next

  The {{{../SpringHttpServer/index.html}next tutorial}} covers integrating Spring beans into OfficeFloor.
  
