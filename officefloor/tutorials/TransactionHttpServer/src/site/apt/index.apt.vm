                                               -----------------------
                                           Transaction HTTP Server Tutorial
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Transaction HTTP Server Tutorial>>

  This tutorial demonstrates providing transaction context to an OfficeFloor web application.  OfficeFloor refers to context as {{{/apidocs/net/officefloor/frame/api/governance/Governance.html}Governance}}.
  
  The example used for this tutorial is adding posts via a REST service.

  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/TransactionHttpServer/${projectVersion}/TransactionHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}


Configuration

  The following is the <<<application.woof>>> configuration for the example application.

[./images/transaction-woof.png] application.woof configuration.


* Transaction (Governance) configuration

  The transaction is managed via {{{/apidocs/net/officefloor/compile/spi/governance/source/GovernanceSource.html}GovernanceSource}}.  This is a generic means to provide context around logic with the application.
  
  In this particular case, the {{{/apidocs/net/officefloor/spring/data/SpringDataTransactionGovernanceSource.html}SpringDataTransactionGovernanceSource}} is used to provide transaction management over Spring repositories.

  To enable transaction management, add a Governance item.  Once added, the scope of the transaction (governance) must be specified.  This is achieved by adding the area around all logic in scope for the transaction.  Logic components within the area will be managed by the transaction.
  
  The transaction will be started when flow moves from a logic component outside the area to a logic compoent within the area.
  
  The transaction will end in either two ways:
  
   * normal flow moves to a logic component outside the transaction (causing the transaction to commit)
   
   * exception handling outside the area (causing the transaction to rollback)
   
  Note: that exception handling within the transaction area will continue the transaction.
  
  Note: completing the flow within the transaction scope also commits the transaction.
  

* Spring Data integration

  To enable use of Spring data in OfficeFloor's multi-threaded {{{/apidocs/net/officefloor/frame/api/team/Team.html}Team}} environment, add the following dependency:
  
%{snippet|id=tutorial|file=${basedir}/pom.xml}

  This will ensure the Spring Data transaction thread locals are propagated across Threads. 
  

Unit Test

  The transaction logic is as follows:
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/transactionhttpserver/TransactionLogic.java}

  This will attempt to write two posts to the database.  As per the configuration, the exception handled is either within the transaction (committing) or outside (roll back).
  
  Note that this is demonstrating the impact of exception handling on transaction (governance) scope.  Completion of flows without exceptions will commit the transaction.
  
  The application also has the following {{{/apidocs/net/officefloor/frame/api/team/Team.html}Team}} configuration to demonstrate Spring Data transaction working across threads.
  
%{snippet|file=${basedir}/src/main/resources/application.teams}
  
  The following unit test demonstrates committing the transaction (as exception handled within transaction). 

%{snippet|id=commit|file=${basedir}/src/test/java/net/officefloor/tutorial/transactionhttpserver/TransactionHttpServerTest.java}

  The following unit test demonstrates rolling back the transaction (as exception handled outside transaction scope).

%{snippet|id=commit|file=${basedir}/src/test/java/net/officefloor/tutorial/transactionhttpserver/TransactionHttpServerTest.java}


Next

  The {{{../TestHttpServer/index.html}next tutorial}} covers testing a WoOF web application.

