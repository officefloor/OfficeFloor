~~~
~~ #%L
~~ Google Signin Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~

                                               -----------------------
                                               Google Sign-in Tutorial 
                                               -----------------------
					                            Daniel Sagenschneider
                                               -----------------------

Google Sign-in Tutorial

  This tutorial demonstrates {{{https://developers.google.com/identity/sign-in/web/}Google Sign-in}} integrated into WoOF.
   
  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/GoogleSigninHttpServer}Tutorial Source}}



*Sign-in JavaScript

  As per the {{{https://developers.google.com/identity/sign-in/web/}Google Sign-in tutorial}}, Google sign-in is configured as follows.
  
  Note that JQuery has been used.  However, any supported web / mobile front-end technology can be used.  See the {{{https://officefloor.appspot.com/}OfficeFloor Subscription App}} for example (code available {{{https://github.com/officefloor/Subscription}here}}).
      
%{snippet|file=${basedir}/src/main/resources/PUBLIC/index.html|ignoreDownloadError=false}

  This will use the Google sign-in features and send the Google Id Token to WoOF to login in the user.  This is confirmed by displaying the user's email (sent back from the WoOF server).



*Configuring Google Sign-in Integration

  Google sign-in is configured in <<<application.objects>>> as follows:
  
%{snippet|file=${basedir}/src/main/resources/application.objects|ignoreDownloadError=false}

  This is used by the following service method to verify the user login and send back the email:
    
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/googlesigninhttpserver/LoginLogic.java|ignoreDownloadError=false}
    


*Testing

  To avoid having to call Google with real users, the following unit tests demonstrates creating mock tokens:
  
%{snippet|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/googlesigninhttpserver/GoogleSigninHttpServerTest.java|ignoreDownloadError=false}

  JUnit 4 example:

%{snippet|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/googlesigninhttpserver/GoogleSigninHttpServerJUnit4Test.java|ignoreDownloadError=false}



Next


  The {{{../FirestoreHttpServer/index.html}next tutorial}} covers using Google {{{https://cloud.google.com/firestore}Firestore}}.
