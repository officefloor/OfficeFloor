~~~
~~ #%L
~~ Team HTTP Server Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~

                                               -----------------------
                                         Thread Injection Tutorial
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Thread Injection Tutorial

  This tutorial demonstrates the ability to assign a thread pool to execute specific methods (i.e. Thread Injection).  See {{{https://sagenschneider.blogspot.com/2019/02/inversion-of-coupling-control.html}Inversion of Coupling Control}} for more details.
  
  The example used for this tutorial is a simple encryption.  A database table stores the mapping of a letter to an alternate letter.  The encryption occurs by using the database to map the clear text letter to the encrypted letter.
  
  To demonstrate Thread Injection, once the letter encryption is looked up in the database it is cached to provide quicker subsequent look ups for that letter.  As the database operation is blocking, it is executed by a separate thread pool to avoid the socket threads from blocking.  The cached letters are serviced only by the socket threads to reduce thread overheads (as no blocking looking up in memory).  This demonstrates Thread Injection's ability to tune execution of various aspects of the application to specific thread pools.
  
  The example's web page is as follows and has been kept simple to focus on thread injection.

[./images/TeamHttpServer-screenshot.png] TeamHttpServer screen shot.
  
  The example displays the names of two threads to show the different thread pools servicing the request.
  
   * thread to obtain cached letter encryption
   
   * thread (pool) to look up letter encryption within the database
   
  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/TeamHttpServer}Tutorial Source}}



*Thread Injection Configuration
  
  The Thread Injection configuration is contained in the <<<application.teams>>> file at the root of the class path.  For the example application it is as follows.

  Note that OfficeFloor refers to a thread pool as a {{{/apidocs/net/officefloor/frame/api/team/Team.html}Team}}.  The naming comes from OfficeFloor basing it's modeling on a business.
    
%{snippet|file=${basedir}/src/main/resources/application.teams|ignoreDownloadError=false}
  
  The team is a {{{/apidocs/net/officefloor/frame/api/team/source/TeamSource.html}TeamSource}} implementation that provides a thread pool via Java's concurrent <<<Executor>>>.
  
  OfficeFloor uses the method's dependencies to determine the type of functionality being undertaken by the method.  The method's dependencies give an indicator of what the method is likely to be doing.  In this case if the method requires a <<<Connection>>> it is very likely that it will be doing blocking database I/O calls.  This means of classifying methods allows OfficeFloor to auto-magically use the appropriate thread pool to execute the method.  It is what OfficeFloor considers <<<Thread Injection>>>.

  All other methods are executed by the default <<<Team>>>.  Running stand-alone this would be the socket listener thread.
  
  Note: the default <<<Team>>> actually re-uses the invoking thread of the previous method.  This reduces thread context switching and improves performance.  For a full explanation of <<<Thread Injection>>> please read the {{{../../about.html}paper on OfficeFloor}}. 
  
  Adding thread pools is optional and therefore the inclusion of the <<<application.teams>>> file is optional.  It is anticipated that threading will be configured closely to the dependencies available within an environment.  The file however is supported for extending WoOF web applications by customising the thread pools.



*Code
  
  The following is the content of the template.

%{snippet|file=${basedir}/src/main/resources/Template.woof.html|ignoreDownloadError=false}

  The following provides the values for the <<< $\{property\} >>> entries from the template logic.  

%{snippet|id=values|file=${basedir}/src/main/java/net/officefloor/tutorial/teamhttpserver/Template.java|ignoreDownloadError=false}
  
  Along with providing the values the class is also annotated so that it is stored within the HTTP session.  This allows the <<<cache>>> field to act as a cache across requests.  See the {{{../index.html}other tutorials}} for further details.
  
  The example application first tries the cache for the encrypted code.
  
%{snippet|id=cache|file=${basedir}/src/main/java/net/officefloor/tutorial/teamhttpserver/Template.java|ignoreDownloadError=false}

  Should the encrypted code be found in the cache it is passed as a parameter to the setter method.  The setter method keeps reference to the encrypted code for rendering the web page response.  See the {{{../index.html}other tutorials}} for explanation of this WoOF functionality.

  On not finding the encrypted code in the cache the above method triggers for it to be retrieved from the database.  The following method retrieves the encrypted code from the database.  The returned encrypted code is passed to the setter method for rendering to the web page.

%{snippet|id=database|file=${basedir}/src/main/java/net/officefloor/tutorial/teamhttpserver/Template.java|ignoreDownloadError=false}

  As the method has a <<<Connection>>> dependency (which is dependent on the <<<DataSource>>> dependency) it is executed by the configured team.  This is reflected by the web page response showing different threads executing the cache and database methods.
     
  Though this is a simple example it does highlight that under heavy load that cached letter encryptions can still be serviced even if all database (team) threads are blocked waiting on the database.



*Unit Test

  The following unit test makes requests to encrypt a letter.

%{snippet|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/teamhttpserver/TeamHttpServerTest.java|ignoreDownloadError=false}

  JUnit 4 example:

%{snippet|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/teamhttpserver/TeamHttpServerJUnit4Test.java|ignoreDownloadError=false}

  As the same letter is requested, the
  
   * first request retrieves the encrypted code from the database (and caches it).  A thread from the database thread pool is used.
   
   * second request retrieves it from the cache.  Only the socket thread is used.



Next

  The {{{../TestHttpServer/index.html}next tutorial}} covers testing a WoOF web application.
