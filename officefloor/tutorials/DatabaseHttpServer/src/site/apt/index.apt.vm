~~~
~~ #%L
~~ Database HTTP Server Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ This program is free software: you can redistribute it and/or modify
~~ it under the terms of the GNU Affero General Public License as published by
~~ the Free Software Foundation, either version 3 of the License, or
~~ (at your option) any later version.
~~ 
~~ This program is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of
~~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~ GNU General Public License for more details.
~~ 
~~ You should have received a copy of the GNU Affero General Public License
~~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
~~ #L%
~~~

                                               -----------------------
                                    Dependency Injection of Managed Object Tutorial 
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Dependency Injection of Managed Object Tutorial

  This tutorial demonstrates the dependency injection of a <<<Connection>>>.   The <<<Connection>>> is provided by a {{{/apidocs/net/officefloor/frame/api/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} implementation (i.e. {{{/apidocs/net/officefloor/jdbc/ConnectionManagedObjectSource.html}ConnectionManagedObjectSource}}).

  A {{{/apidocs/net/officefloor/frame/api/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} enables injection of customised objects.  The customised objects have greater access to OfficeFloor/WoOF functionality than plain old java objects (POJOs).  OfficeFloor/WoOF, however, supports both as POJOs are simpler to implement.
  
  The example used in this tutorial is the following simple application to manage rows within a database table.
  
[./images/DatabaseHttpServer-screenshot.png] DatabaseHttpServer screen shot.
  
  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/DatabaseHttpServer}Tutorial Source}}



*Configuring Objects

  Objects for dependency injection are configured in the <<<application.objects>>> file contained at the root of the class path.  
  
  Providing this file is optional.  It is anticipated that features such as WoOF annotations and {{{/apidocs/net/officefloor/compile/spi/supplier/source/SupplierSource.html}SupplierSource}} implementations will provide the necessary dependencies for running a web application.  See the {{{../index.html}other tutorials}} for more information.  The file is however supported to extend WoOF web applications with additional custom dependencies.
  
  The configuration of the dependency injected <<<Connection>>> is as follows.

%{snippet|file=${basedir}/src/main/resources/application.objects|ignoreDownloadError=false}

  The <<<Connection>>> is provided by a {{{/apidocs/net/officefloor/frame/api/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} implementation that closes the connection on completion of the request.  This depends on the <<<DataSource>>> to provide a managed <<<Connection>>>.
  
  Properties to configure the {{{/apidocs/net/officefloor/frame/api/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} implementations can be provided in the above file or within a properties file.
  
  The contents of configured property file is as follows.

%{snippet|file=${basedir}/src/main/resources/datasource.properties|ignoreDownloadError=false}

  Objects to be dependency injected within OfficeFloor are made available by {{{/apidocs/net/officefloor/frame/api/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} implementations.  Many dependency injection frameworks are based solely on the object's <<<Class>>> and its necessary dependency injection of other objects.  OfficeFloor goes beyond this by providing more capabilities to the object such as invoking {{{/apidocs/net/officefloor/frame/api/managedobject/source/ManagedObjectExecuteContext.html}processes}}.  For example the socket listener within a stand-alone WoOF HTTP Server is actually a {{{/apidocs/net/officefloor/server/http/HttpServerSocketManagedObjectSource.html}HttpServerSocketManagedObjectSource}} that invokes an OfficeFloor lightweight process to service the HTTP request.
  
  The {{{/apidocs/net/officefloor/plugin/managedobject/clazz/ClassManagedObjectSource.html}ClassManagedObjectSource}} is available to provide the typical POJO dependency injection.



*Dependency Injection
  
  The following is the content of the template. 

%{snippet|file=${basedir}/src/main/resources/Template.woof.html|ignoreDownloadError=false}

  The table data is provided by the following method.

%{snippet|id=getRows|file=${basedir}/src/main/java/net/officefloor/tutorial/databasehttpserver/Template.java|ignoreDownloadError=false}

  As the method is matched to the template by name, OfficeFloor uses the method's parameters to identify the necessary dependencies to be injected.  In this case the only dependency is the <<<Connection>>> which was configured above.
  
  WoOF auto-wires dependency injection based on type.  Auto-wiring dependencies based on type is adequate (and much easier) for the majority of applications.  WoOF's underlying OfficeFloor framework does provide manual dependency configuration, however this is seldom used as OfficeFloor allows qualifying dependencies for auto-wiring.
  
  The handling of <<< #\{addRow\} >>> submission is via the following method.

%{snippet|id=addRow|file=${basedir}/src/main/java/net/officefloor/tutorial/databasehttpserver/Template.java|ignoreDownloadError=false}

  The method requires two parameters to be dependency injected.  The <<<Connection>>> is dependency injected as above.  The <<<Row>>> object below is also dependency injected by its WoOF annotation.  See the {{{../index.html}other tutorials}} for more details on WoOF annotations.
  
%{snippet|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/databasehttpserver/Row.java|ignoreDownloadError=false}
 
  The delete row functionality is similar to the add functionality.

%{snippet|id=deleteRow|file=${basedir}/src/main/java/net/officefloor/tutorial/databasehttpserver/Template.java|ignoreDownloadError=false}

  After the add or delete method is executed the template is rendered again for the response back to the client.  The rendering of the page executes the <<<getRows(...)>>> method again to display the changes within the table.



*Unit Test

  The unit test requests the page and then adds a row and deletes a row.
  
%{snippet|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/databasehttpserver/DatabaseHttpServerTest.java|ignoreDownloadError=false}



Next

  The {{{../StartBeforeHttpServer/index.html}next tutorial}} covers start up ordering of {{{/apidocs/net/officefloor/frame/api/managedobject/source/ManagedObjectSource.html}ManagedObjectSource}} instances.
