/*
 * 
 */
package graph.test;

import java.util.List;
import java.util.LinkedList;

import net.officefloor.model.AbstractModel;
import net.officefloor.model.RemoveConnectionsAction;

public class TwoModel extends AbstractModel {

    public static enum TwoEvent {
     ADD_ONE_LIST, REMOVE_ONE_LIST
    }

    /**
     * Default constructor.
     */
    public TwoModel() {
    }

    /**
     * Convenience constructor.
     */
    public TwoModel(
      ConnectionModel[] oneList
    ) {
        if (oneList != null) {
            for (ConnectionModel model : oneList) {
                this.oneList.add(model);
            }
        }
    }

    /**
     * Convenience constructor allowing XY initialising.
     */
    public TwoModel(
      ConnectionModel[] oneList
    , int x
    , int y
    ) {
        if (oneList != null) {
            for (ConnectionModel model : oneList) {
                this.oneList.add(model);
            }
        }
        this.setX(x);
        this.setY(y);
    }


    /**
     * One list.
     */
    private List<ConnectionModel> oneList = new LinkedList<ConnectionModel>();

    public List<ConnectionModel> getOneLists() {
        return this.oneList;
    }

    public void addOneList(ConnectionModel oneList) {
        this.addItemToList(oneList, this.oneList, TwoEvent.ADD_ONE_LIST);
    }

    public void removeOneList(ConnectionModel oneList) {
        this.removeItemFromList(oneList, this.oneList, TwoEvent.REMOVE_ONE_LIST);
    }


    /**
     * Remove Connections.
     */
    public RemoveConnectionsAction<TwoModel> removeConnections() {
        RemoveConnectionsAction<TwoModel> _action = new RemoveConnectionsAction<TwoModel>(this);
        _action.disconnect(this.oneList);
        return _action;
    }
}