/*
 * License
 */
package net.officefloor;

import java.util.List;
import java.util.LinkedList;

import net.officefloor.test.SpecialType;
import net.officefloor.model.AbstractModel;
import net.officefloor.model.RemoveConnectionsAction;

public class ClassModel extends AbstractModel {

    public static enum ClassEvent {
     CHANGE_FIELD_ONE, CHANGE_FIELD_TWO, ADD_LIST_ONE, REMOVE_LIST_ONE, ADD_LIST_TWO, REMOVE_LIST_TWO
    }

    /**
     * Default constructor.
     */
    public ClassModel() {
    }

    /**
     * Convenience constructor.
     */
    public ClassModel(
      int fieldOne
    , String fieldTwo
    , Integer[] listOne
    , SpecialType[] listTwo
    ) {
        this.fieldOne = fieldOne;
        this.fieldTwo = fieldTwo;
        if (listOne != null) {
            for (Integer model : listOne) {
                this.listOne.add(model);
            }
        }
        if (listTwo != null) {
            for (SpecialType model : listTwo) {
                this.listTwo.add(model);
            }
        }
    }

    /**
     * Convenience constructor allowing XY initialising.
     */
    public ClassModel(
      int fieldOne
    , String fieldTwo
    , Integer[] listOne
    , SpecialType[] listTwo
    , int x
    , int y
    ) {
        this.fieldOne = fieldOne;
        this.fieldTwo = fieldTwo;
        if (listOne != null) {
            for (Integer model : listOne) {
                this.listOne.add(model);
            }
        }
        if (listTwo != null) {
            for (SpecialType model : listTwo) {
                this.listTwo.add(model);
            }
        }
        this.setX(x);
        this.setY(y);
    }

    /**
     * Field one.
     */
    private int fieldOne;

    public int getFieldOne() {
        return this.fieldOne;
    }

    public void setFieldOne(int fieldOne) {
        int oldValue = this.fieldOne;
        this.fieldOne = fieldOne;
        this.changeField(oldValue, this.fieldOne, ClassEvent.CHANGE_FIELD_ONE);
    }

    /**
     * Field two.
     */
    private String fieldTwo;

    public String getFieldTwo() {
        return this.fieldTwo;
    }

    public void setFieldTwo(String fieldTwo) {
        String oldValue = this.fieldTwo;
        this.fieldTwo = fieldTwo;
        this.changeField(oldValue, this.fieldTwo, ClassEvent.CHANGE_FIELD_TWO);
    }


    /**
     * List one.
     */
    private List<Integer> listOne = new LinkedList<Integer>();

    public List<Integer> getListOnes() {
        return this.listOne;
    }

    public void addListOne(Integer listOne) {
        this.addItemToList(listOne, this.listOne, ClassEvent.ADD_LIST_ONE);
    }

    public void removeListOne(Integer listOne) {
        this.removeItemFromList(listOne, this.listOne, ClassEvent.REMOVE_LIST_ONE);
    }

    /**
     * List two.
     */
    private List<SpecialType> listTwo = new LinkedList<SpecialType>();

    public List<SpecialType> getListTwos() {
        return this.listTwo;
    }

    public void addListTwo(SpecialType listTwo) {
        this.addItemToList(listTwo, this.listTwo, ClassEvent.ADD_LIST_TWO);
    }

    public void removeListTwo(SpecialType listTwo) {
        this.removeItemFromList(listTwo, this.listTwo, ClassEvent.REMOVE_LIST_TWO);
    }


    /**
     * Remove Connections.
     */
    @SuppressWarnings("unchecked")
    public RemoveConnectionsAction<ClassModel> removeConnections() {
        RemoveConnectionsAction<ClassModel> _action = new RemoveConnectionsAction<ClassModel>(this);
        return _action;
    }
}
