/*
 * 
 */
package graph.test;

import java.util.List;
import java.util.LinkedList;

import net.officefloor.model.AbstractModel;
import net.officefloor.model.RemoveConnectionsAction;

public class OneModel extends AbstractModel {

    public static enum OneEvent {
     CHANGE_TWO_FIELD, CHANGE_CASCADE_FIELD, ADD_CASCADE_LIST, REMOVE_CASCADE_LIST
    }

    /**
     * Default constructor.
     */
    public OneModel() {
    }

    /**
     * Convenience constructor.
     */
    public OneModel(
      ConnectionModel twoField
    , CascadeModel cascadeField
    , CascadeModel[] cascadeList
    ) {
        this.twoField = twoField;
        this.cascadeField = cascadeField;
        if (cascadeList != null) {
            for (CascadeModel model : cascadeList) {
                this.cascadeList.add(model);
            }
        }
    }

    /**
     * Convenience constructor allowing XY initialising.
     */
    public OneModel(
      ConnectionModel twoField
    , CascadeModel cascadeField
    , CascadeModel[] cascadeList
    , int x
    , int y
    ) {
        this.twoField = twoField;
        this.cascadeField = cascadeField;
        if (cascadeList != null) {
            for (CascadeModel model : cascadeList) {
                this.cascadeList.add(model);
            }
        }
        this.setX(x);
        this.setY(y);
    }

    /**
     * Two field.
     */
    private ConnectionModel twoField;

    public ConnectionModel getTwoField() {
        return this.twoField;
    }

    public void setTwoField(ConnectionModel twoField) {
        ConnectionModel oldValue = this.twoField;
        this.twoField = twoField;
        this.changeField(oldValue, this.twoField, OneEvent.CHANGE_TWO_FIELD);
    }

    /**
     * Cascade field.
     */
    private CascadeModel cascadeField;

    public CascadeModel getCascadeField() {
        return this.cascadeField;
    }

    public void setCascadeField(CascadeModel cascadeField) {
        CascadeModel oldValue = this.cascadeField;
        this.cascadeField = cascadeField;
        this.changeField(oldValue, this.cascadeField, OneEvent.CHANGE_CASCADE_FIELD);
    }


    /**
     * Cascade list.
     */
    private List<CascadeModel> cascadeList = new LinkedList<CascadeModel>();

    public List<CascadeModel> getCascadeLists() {
        return this.cascadeList;
    }

    public void addCascadeList(CascadeModel cascadeList) {
        this.addItemToList(cascadeList, this.cascadeList, OneEvent.ADD_CASCADE_LIST);
    }

    public void removeCascadeList(CascadeModel cascadeList) {
        this.removeItemFromList(cascadeList, this.cascadeList, OneEvent.REMOVE_CASCADE_LIST);
    }


    /**
     * Remove Connections.
     */
    public RemoveConnectionsAction<OneModel> removeConnections() {
        RemoveConnectionsAction<OneModel> _action = new RemoveConnectionsAction<OneModel>(this);
        _action.disconnect(this.twoField);
        if (this.cascadeField != null) {
            _action.addCascadeModel(this.cascadeField.removeConnections());
        }
        for (CascadeModel _cascade : this.cascadeList) {
            _action.addCascadeModel(_cascade.removeConnections());
        }
        return _action;
    }
}