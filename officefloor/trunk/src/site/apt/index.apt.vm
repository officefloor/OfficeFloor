				       ------------------
				             Welcome
				       ------------------
				      Daniel Sagenschneider
				       ------------------

  <<Welcome to OfficeFloor>>

  OfficeFloor is an Inversion of Control 2.0 implementation that focuses on dependency injection into methods rather than into objects and improves on existing dependency injection frameworks by letting you specify the Thread to execute the method - thereby really adhering to the "Hollywood Principle" (don't call us, we "really" will call you).
  
  OfficeFloor is freely distributed under GPL and the source is available {{{./source-repository.html}here}}.
  
Features

  * Combines the object oriented ease of programming with the multi-threaded performance of functional programming

  * Provides both auto-wiring of dependencies and manual graphical configuration

  * Abstraction of plug-ins to enable more course grained integration than individual classes (allows easier assembly and management of applications)

  * WoOF (Web on OfficeFloor - {{{http://webfloor.org}http://webfloor.org}} ) provides simplified web application development that allows easy integration with WSYWIG web design tools
  
  * Servlet Filter for running within a JEE Servlet Container that can optionally make use of EJBs

  * Spring plug-in to enable re-use of your existing Spring beans


Example Capabilities

  The following code provides simple examples of OfficeFloor capabilities: 

%{code-snippet|brush-autodetect=1|file=src/site/snippets/HttpServer.java}

  Further examples can be found in the {{{./tutorials/index.html}tutorials}}.

  
Graphical Configuration

  The above example was limited to code configuration.  The further value of OfficeFloor lies in its {{{./eclipse/graphical-configuration.html}graphical configuration}}.  
  
  An example graphical configuration from {{{http://webfloor.org}WoOF (Web on OfficeFloor)}} for web site navigation is:

[./images/graphical-configuration.png] Example graphical configuration of WoOF.

  To use the graphical configuration install the {{{./eclipse/index.html}OfficeFloor Eclipse plug-ins}}.

  
So why another framework?
  
  Existing dependency injection frameworks typically restrict your threading design by assuming single thread of execution.  OfficeFloor removes this assumption so that you can have different Threads execute different functions of your application - something very useful since performance gains these days are occurring by parrallelising your applications with more CPU cores.  See OfficeFloor's {{{./core/officeframe/job-based-architecture.html}Job Based Architecture}} for more details.
  
  Further to this, OfficeFloor has been built from the ground up to use graphical configuration (it is one of the {{{./principles.html}principles}} behind OfficeFloor).  No longer should you be spending time maintaining long error prone XML configuration files.  OfficeFloor is {{{./eclipse/graphical-configuration.html}graphically configured}} to provide you visually rich configuration that enables {{{./promote-good-design.html}promoting good designs}}.
  
  Both of these aspects result in simpler application development.  {{{http://webfloor.org}Web on OfficeFloor (WoOF)}} is testiment of the simplicity that OfficeFloor brings to development.
  

Find out more

  To find out more about OfficeFloor:
  
   * See the {{{./tutorials/index.html}Tutorials}}

   * Read about the {{{./architecture.html}Architecture}}

   * Understand the {{{./principles.html}Principles}}

   * Develop within {{{./eclipse/index.html}Eclipse}}

