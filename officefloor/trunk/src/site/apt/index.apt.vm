				       ------------------
				             Welcome
				       ------------------
				      Daniel Sagenschneider
				       ------------------

  <<Welcome to OfficeFloor>>

  OfficeFloor is an Inversion of Control 2.0 implementation that focuses on dependency injection into methods rather than into objects and improves on existing dependency injection frameworks by letting you specify the Thread to execute the method - thereby really adhering to the "Hollywood Principle" (don't call us, we "really" will call you).
  
  OfficeFloor is freely distributed under GPL and the source is available {{{./source-repository.html}here}}.
  
Features

  * Multi-threaded Java framework providing for thread safe execution of your methods (with ability to specify differing thread pools to execute particular methods)
  
  * Dependency injection of objects as parameters to the executed methods
  
  * Provides both auto-wiring of dependencies and manual graphical configuration
  
  * Abstraction of plug-ins to enable more course grained integration than individual classes (allows easier assembly and management of applications)
  
  * Existing plug-ins to build web based applications
  
  * JEE Servlet integration for web based applications
  
  * Spring plug-in to enable re-use of your existing Spring beans

Simple Example

  The following provides a simple example of OfficeFloor capabilities via its web plug-in: 

%{code-snippet|sh-params=highlight:[10,11]|brush-autodetect=1|file=src/site/snippets/HttpServer.java}

  Further examples can be found {{{./examples/index.html}here}}.

* Graphical Configuration

  The above example was limited to code configuration of OfficeFloor.  The further value of OfficeFloor lies in its {{{./eclipse/graphical-configuration.html}graphical configuration}}.  An example of the graphical configuration is below:

[./images/screenshot.png] Example graphical configuration of OfficeFloor

  See the {{{./eclipse/index.html}OfficeFloor Eclipse plug-ins}} for further configuration and watch the {{{./demo.html}demo}}.

So why another framework?
  
  Existing dependency injection frameworks typically restrict your threading design by assuming single thread of execution.  OfficeFloor removes this assumption so that you can have different Threads execute different functions of your application - something very useful since performance gains these days are occurring by parrallelising your applications with more CPU cores.  See OfficeFloor's {{{./core/officeframe/job-based-architecture.html}Job Based Architecture}} for more details.
  
  Further to this, OfficeFloor has been built from the ground up to use graphical configuration (it is one of the {{{./principles.html}principles}} behind OfficeFloor).  No longer should you be spending days maintaining long error prone XML configuration files.  OfficeFloor is {{{./eclipse/graphical-configuration.html}graphically configured}} to provide you visually rich configuration that enables {{{./promote-good-design.html}promoting good designs}}.
  
Find out more

  To find out more about OfficeFloor:
  
   * Review the {{{./examples/index.html}Examples}}

   * Watch the {{{./demo.html}Demo}}

   * Read about the {{{./architecture.html}Architecture}}

   * Understand the {{{./principles.html}Principles}}

   * Develop within {{{./eclipse/index.html}Eclipse}}

