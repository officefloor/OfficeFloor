                                               -----------------------
                                              Static HTTP Server Example 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Static Http Server Example>>

  This example uses the {{{/apidocs/net/officefloor/compile/spi/officefloor/source/OfficeFloorSource.html}OfficeFloorSource}} implementation {{{/apidocs/net/officefloor/plugin/web/http/server/HttpServerAutoWireOfficeFloorSource.html}HttpServerAutoWireOfficeFloorSource}} to demonstrate the concept of opening and closing an OfficeFloor along with the ease of using OfficeFloor for a HTTP Server. 
  
Code

%{code-snippet|sh-params=highlight:[4]|brush-autodetect=1|id=example|file=src/main/java/net/officefloor/example/statichttpserver/StaticHttpServer.java}

  The above code will start a HTTP Server on the default port 7878 servicing files from the class path under the <<<PUBLIC>>> directory.  In other words the <<<index.html>>> file would be located on the class path as <<<PUBLIC/index.html>>>.  The following is an example jar structure:

---------------------------------
        +-PUBLIC/
        | +-index.html
        | +-images/
        | | +-logo.png
        | +-css/
        |   +-site.css
        +-net/               (contents not public)
          +-officefloor/
            +-Example.class
---------------------------------  
  
  Note that only files under the <<<PUBLIC>>> directory will be made available which keeps the code private.  This structure also allows using the classes within the jar without special class loading.

  The reason for using the class path is that all web content need not be deployed in the one jar.  This allows for modular construction of a web site.  For example the images and css can be maintained in one jar while the web pages provided in another jar.  Further to this, though not within the scope of this example, is using  {{{/apidocs/net/officefloor/compile/spi/section/source/SectionSource.html}SectionSource}} implementations to modularise the functionality of the web site.

Unit Test

  The unit test requests <<<index.html>>> from the HTTP Server.  It also demonstrates opening and closing the OfficeFloor within the setup and teardown methods respectively.

* Setup

%{code-snippet|sh-params=highlight:[2]|brush-autodetect=1|id=setup|file=src/test/java/net/officefloor/example/statichttpserver/StaticHttpServerTest.java}

  Starts the example HTTP Server.

* Test by requesting index.html

%{code-snippet|sh-params=highlight:[4,5]|brush-autodetect=1|id=test|file=src/test/java/net/officefloor/example/statichttpserver/StaticHttpServerTest.java}

  Requests <<<index.html>>> from the HTTP Server.

* TearDown

%{code-snippet|sh-params=highlight:[2]|brush-autodetect=1|id=teardown|file=src/test/java/net/officefloor/example/statichttpserver/StaticHttpServerTest.java}

  As the code to run the HTTP Server is contained within the <<<main>>> method, the {{{/apidocs/net/officefloor/plugin/autowire/AutoWireOfficeFloor.html}AutoWireOfficeFloor}} provides means to stop the HTTP Server via JMX.  This means that code need not expose the {{{/apidocs/net/officefloor/frame/api/manage/OfficeFloor.html}OfficeFloor}} for closing between tests.
