                                               -----------------------
                                              Static HTTP Server Example 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Static Http Server Example>>

  This example shows the basic layout of a web application and how to run the web application.  To demonstrate this the below example will start a HTTP server and respond with a static <<<index.html>>> page - later examples will look at dynamic content but is out of scope for this example.
  
  Please note that this example utilises the {{{/apidocs/net/officefloor/plugin/woof/WoofMain.html}WoofMain}} for running the web application.  In utilising within a JEE Servlet Container, there are slight differences to layout as the {{{/apidocs/net/officefloor/plugin/servlet/WoofServletFilter.html}WoofServletFilter}} will adhere to the WAR layout and defers all unhandled requests to be handled by the JEE Servlet Container (allowing integration with your existing Servlet applications).  Please see later examples as running within JEE Servlet Containers is beyond the scope of this example.
  
  The <<<WoOF>> acronym standards for <<<Web on OfficeFloor>>>.
   
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/example/StaticHttpServer/${projectVersion}/StaticHttpServer-${projectVersion}-project.zip/download}Download Example Source}}
  
Layout

  The following is the example's jar layout:

---------------------------------
        +- PUBLIC/            (contents public)
        |  +- index.html
        |  +- images/
        |  |  +- logo.png
        |  +- css/
        |     +- site.css
        +- net/               (contents not public)
        |  +- officefloor/
        |     +- Example.class
        +- application.woof
---------------------------------
  
  Note that only files under the <<<PUBLIC>>> directory will be made available which keeps the code private (e.g. the <<<net.officefloor.Example>>> and <<<application.woof>>> files will not be visible).  This structure also allows using the classes within the jar without special class loading - such as is the case with the WAR layout.
  
  A {{{http://maven.apache.org}Maven}} plug-in is available to run the web application using the following command line:

+-------------------------------+
        mvn woof:start
+-------------------------------+
  
  The above command will start a HTTP Server on the default port 7878 servicing files from the class path under the <<<PUBLIC>>> directory.  In other words the <<<index.html>>> file would be located on the class path as <<<PUBLIC/index.html>>>.

  The reason for using the class path is that all web content need not be deployed in the one jar.  This allows for modular construction of a web site.  For example the images and css can be maintained in one jar while the web pages provided in another jar.  Further to this, though not within the scope of this example, is using  {{{/apidocs/net/officefloor/compile/spi/section/source/SectionSource.html}SectionSource}} implementations to modularise the functionality of the web site.

Unit Test

  Unit testing your code should always be made easy and this is also the case for web applications.  The following unit tests shows how to start the web application, request the <<<index.html>>> page and then stop it.

* Setup

%{code-snippet|sh-params=highlight:[2]|brush-autodetect=1|id=setup|file=${basedir}/src/test/java/net/officefloor/example/statichttpserver/StaticHttpServerTest.java}

  Starts the example HTTP Server.

* Test by requesting index.html

%{code-snippet|sh-params=highlight:[4,5]|brush-autodetect=1|id=test|file=${basedir}/src/test/java/net/officefloor/example/statichttpserver/StaticHttpServerTest.java}

  Requests <<<index.html>>> from the HTTP Server.

* TearDown

%{code-snippet|sh-params=highlight:[2]|brush-autodetect=1|id=teardown|file=${basedir}/src/test/java/net/officefloor/example/statichttpserver/StaticHttpServerTest.java}

  As the code to run the HTTP Server is contained within the <<<main>>> method, the {{{/apidocs/net/officefloor/plugin/autowire/AutoWireAdministration.html}AutoWireAdministration}} provides means to stop the HTTP Server via JMX.  This means that the unit test code need not maintain reference to the underlying {{{/apidocs/net/officefloor/frame/api/manage/OfficeFloor.html}OfficeFloor}} for closing between tests.

