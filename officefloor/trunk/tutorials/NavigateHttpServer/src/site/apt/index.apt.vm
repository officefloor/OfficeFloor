                                               -----------------------
                                             Navigate HTTP Server Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Navigate Http Server Tutorial>>

  This tutorial demonstrates navigating between two templates. 

  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/NavigateHttpServer/${projectVersion}/NavigateHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}
  
application.woof

  The following shows the configuration of the two HTTP templates and the navigation between the templates.

[./images/navigate-woof.png] application.woof configuration.

  The links are the navigation paths between the templates.  Each template provides outputs that by the above configuration navigates the user to the other page.  The rest of this tutorial will detail how to add the template outputs.
  
TemplateOne

  The first template provides a link to navigate to the other template.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/TemplateOne.html}

  The link is handled by the backing method which in this case of navigating does nothing except provide the annotation to indicate what is the next task within the flow.
  
  The stylesheet is not necessary for navigation linking but is included to show that the navigation links continue to work with relative content to the page.  The stylesheets in this case just provide background colouring to the page to highlight the navigation back and forth between the two pages (templates).

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/navigatehttpserver/TemplateOne.java}

  As the next task name is not a template method name nor name of a section it becomes an output from the HTTP template.  From the configuration above, the output is configured to the other HTTP template.
  
  OfficeFloor strings {{{apidocs/net/officefloor/frame/api/execute/Task.html}Task}} instances together into a {{{apidocs/net/officefloor/frame/internal/structure/Flow.html}Flow}} which allows this ability to control the rendering of templates and navigation between templates.  It is actually possible to string together templates in the one response by linking the <<<output>>> of the template to render further templates.  The <<<output>>> link is optional to be connected, however all other outputs must be linked.

  A template is actually an implementation of a {{{/apidocs/net/officefloor/compile/spi/section/source/SectionSource.html}SectionSource}} within OfficeFloor which results in a section that has named flow inputs and outputs that are linked together which is the mechanism by which OfficeFloor joins sections together as functional building blocks.  The reason for sections is to group tasks together to ease management of large numbers of tasks.  As sections can contain other sections, this provides simple means to effectively organise tasks of an application.

TemplateTwo

  The second template submits to navigate to original template.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/TemplateTwo.html}

  Much like the first template the backing logic also navigates via annotation to an external flow.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/navigatehttpserver/TemplateTwo.java}

  The above configuration has the external flow linked back to the first template.


Unit Test

  The unit test navigates between the templates.

%{code-snippet|brush-autodetect=1|id=test|file=${basedir}/src/test/java/net/officefloor/example/navigatehttpserver/NavigateHttpServerTest.java}

Next

  The basics of WoOF have now been covered.  Please look at the {{{../index.html}next group of tutorials}} for using WoOF within a JEE Servlet Container.
