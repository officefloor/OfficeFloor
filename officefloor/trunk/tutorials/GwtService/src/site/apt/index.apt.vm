                                               -----------------------
                                                GWT Service Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<GWT Service Tutorial>>

  This tutorial demonstrates the simplified integration of {{{http://gwt.google.com}Google Web Toolkit (GWT)}} to provide AJAX functionality to the web page.
  
  The example used in this tutorial is to build a High/Low game.  This is a simple game where you attempt to guess a number and are told higher or lower to aid in guessing.  You win the game by guessing the number within a certain number of tries. 
  
  The focus of the tutorial is using GWT RPC to call on the server to determine whether "higher" or "lower".  To focus on the GWT RPC handling, the game interface has been kept simple and looks as follows.
  
[./images/GwtService-screenshot.png] GwtService screenshot.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/GwtService/${projectVersion}/GwtService-${projectVersion}-project.zip/download}Download Tutorial Source}}



GWT Service Interfaces

  With typical GWT applications two interfaces are required for GWT RPC  - the GWT Service Interface and the GWT Async Interface.  Please see the {{{http://code.google.com/webtoolkit/doc/latest/tutorial/RPC.html}GWT RPC tutorial}} for more details.  
  
  WoOF actually only requires the Async Interface.  The underlying OfficeFloor dependency injection simplifies the server logic so that the GWT Service Interface is not required.
  
  OfficeFloor will however appropriately interrogate the GWT Service Interface for the necessary details (i.e. remote service relative path).


*HighLowGameAsync GWT Async Interface

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/client/HighLowGameAsync.java}

*HighLowGame GWT Service Interface

  As GWT RPC itself requires both interfaces, the GWT Service Interface is also provided.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/client/HighLowGame.java}

  

  
Template.woof.html

  The below is the HTML page.

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.woof.html}

  This simple HTML contains the <<<id>>> attribute for the GWT hook and the WoOF <<<%\{newGame\}>>> link to start a new game.

  Notice that there is mix between HTML and GWT to provide the functionality.  Not all functionality on the web page will typically require RIA capabilities and GWT has done a great job in respecting this.



Server side logic

  The template logic class handles both the web page requests and the GWT RPC calls.
  
%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/TemplateLogic.java}

  The template logic class above has two methods, which respectively:
      
    * starts a new game

    * attempts a guess

  The annotation on the class flags to store the template logic instance within the HTTP Session.  This maintains the state of the game play on the server.
  
  Starting a new game follows standard WoOF functionality of mapping the page link to the corresponding template logic class's method.  Please see the {{{../index.html}other tutorials}} for further details.
  
  The GWT RPC call is also handled by mapping to a template logic class method - in this case <<<attempt>>>.  
  
  Unlike traditional GWT applications, the template logic class does not implement either of the GWT interfaces.  This is deliberate by design for two reasons:
  
    [[1]] Only the client side GWT Async interface is required.  Handling of the GWT RPC call is by matching on method name.
    
    [[1]] Implementing the GWT Service Interfaces dictates the method signature.  This restricts OfficeFloor from dependency injecting objects into the method.
    
  In servicing the GWT RPC call, there are two parameters to the template logic method:
  
    * value sent from the client, and 
    
    * the <<<AsyncCallback>>> interface to enable sending a response to the GWT client.  
    
  Further parameters may be added for other dependencies.
  
  The <<<@Parameter>>> annotation is required to distinguish which parameter receives the value sent from the client.
  
  The reason for using the <<<AsyncCallback>>> interface in the server code is that it does not mix techniques.  In other words, on the client is a GWT Async Interface call back while on the server is a GWT Service Interface synchronous method.  Keeping the server code as a call back is felt to make the coding more intuitive.

  The implementation of the GWT service method is reasonably self explainatory (determines whether correct, too many tries, higher or lower).  As the template object is stored within the HTTP Session, the state of game play is maintained across GWT RPC calls.
  
  

application.woof

  The following shows the configuration for adding this tutorial's template along with it's GWT RPC configuration.
  
[./images/GwtService-add-template-dialog.png] GwtService Add template dialog screenshot.
  
  The GWT Async Interfaces must be specified.  This enables WoOF to bind servicing of the GWT RPC calls to the appropriate template logic class methods.
  
  WoOF will automatically create the appropriate GWT <<<*.gwt.xml>>> configuration file.  



Client side logic

  The client side logic follows standard GWT coding and involves the following classes. 

*Result

  Object used as payload to communicate response from server.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/client/Result.java}

*GWT EntryPoint

  Provides the client side logic.  See {{{http://code.google.com/webtoolkit/doc/latest/tutorial/gettingstarted.html}GWT getting started}} for more details.   

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/client/GwtAppEntryPoint.java}



Unit Testing

  The following unit test shows the use of <<<SyncProxy>>> to test the servicing of the GWT RPC call by the server.
  
%{code-snippet|brush-autodetect=1|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/gwtservice/GameTest.java}



Next

  See the {{{../index.html}other tutorials}} for further functionality.

