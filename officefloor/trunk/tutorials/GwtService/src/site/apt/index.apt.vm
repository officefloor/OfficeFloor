                                               -----------------------
                                                GWT Service Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<GWT Service Tutorial>>

  This tutorial demonstrates the ease in implementing {{{http://gwt.google.com}Google Web Toolkit (GWT)}} services with WoOF to create Rich Internet Applications (RIA) that can interact with the Server (i.e. AJAX functionality).
  
  The example used in this tutorial is to build a simple High/Low game.  This is a simple game where you attempt to guess a number and are told higher or lower to aid in determining the number.  You win the game by guessing the number within a certain number of tries. 
  
  The focus of the tutorial is the GWT client using GWT RPC to call on the server to determine whether "higher" or "lower".  To focus on the GWT RPC handling, the game interface has been kept simple and looks as follows:
  
[./images/GwtService-screenshot.png] GwtService screenshot.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/GwtService/${projectVersion}/GwtService-${projectVersion}-project.zip/download}Download Tutorial Source}}



GWT Service Interfaces

  As per the {{{http://code.google.com/webtoolkit/doc/latest/tutorial/RPC.html}GWT RPC tutorial}} two interfaces are required - the GWT Service Interface and the GWT Async Interface.
  
  WoOF actually only requires the Async Interface as the method dependency injection of the underlying OfficeFloor framework simplifies the implementation of the server logic.   WoOF will however appropriately interrogate the Service interface for the necessary details (i.e. remote service relative path).

*HighLowGameAsync GWT Async Interface

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/client/HighLowGameAsync.java}

*HighLowGame GWT Service Interface

  As GWT RPC requires both interfaces, the Service interface is also provided.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/client/HighLowGame.java}

  

  
Template.html

  The below is the content of the <<<Template.html>>>.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/Template.html}

  This simple HTML contains the <<<id>>> attribute for the GWT hook and the WoOF <<<%\{newGame\}>>> link to start a new game.

  Notice that there is mix between HTML and GWT to provide the functionality.  Not all functionality on your page will typically require RIA capabilities and GWT has done a great job in respecting this.  WoOF further respects this by taking this concept to the server to enable a single object to provide both the HTML dynamic logic and the servicing of GWT RPC calls.  Furthermore, WoOF keeps the development easy by making the server object a POJO (plain old java object).



Server side logic

  There is only one class required to be implemented for the Server to provide the functionality for both handling the New Game form submission and the GWT RPC call. 

*TemplateLogic class

  The logic class handles GWT RPC calls in similar means to page submissions and allows all this to be in the same class to keep the code in your applications simplier.  The following is the logic class with the two methods that handle:
      
    * starting a new game

    * a guess attempt

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/TemplateLogic.java}

  The annotation on the class flags to store the template logic instance within the HTTP Session.  This enables maintaining state of the game play on the server.  This ability to store the template logic instance within the HTTP Session is only possible due to the method dependency injection provided by the underlying OfficeFloor framework.  As all dependencies are injected as method parameters, dependencies are not referenced by fields of the class and therefore this allows the class to be serialisable (necessary condition for storing objects within the HTTP Session).
  
  For starting a new game this is standard WoOF functionality of mapping the page submission link to the logic class's method by name.  Please see the {{{../index.html}WoOF tutorials}} for further details.
  
  Therefore let us get to the interesting aspect - the handling of the GWT RPC call.  The handling of the GWT RPC call is also handled by mapping to the logic class by method name - in this case <<<attempt>>>.  As WoOF is based on OfficeFloor which focuses on method dependency injection, the template logic class does not implement either of the GWT interfaces.  This is deliberate by design for two reasons:
  
    [[1]] Only the client side GWT Async interface is required, which is mapped to the server implementing method by name.  The GWT Service interface is only required for the GWT JavaScript compilation.  (WoOF is doing this to reduce the amount of code needing to be written and is focusing on removing the need for the GWT Service interface all together).
    
    [[1]] Implementing the GWT interfaces forces dependencies in servicing the request to be obtained via alternative mechanisms (making the logic class stateful by referencing dependencies from fields or static methods).
    
  In servicing the GWT RPC call, there are two parameters to the GWT servicing method:
  
    * value sent from the client, and 
    
    * the <<<AsyncCallback>>> interface to enable sending a response to the GWT client.  
    
  Further parameters may be added to the method for other dependencies in servicing the request, which is why the <<<@Parameter>>> annotation is required to distinguish it to come from the GWT RPC call.
  
  The implementation of the GWT service method is reasonably self explainatory (determines whether correct, too many tries, higher or lower) and as the template object is stored within the HTTP Session, the state of game play is maintained across GWT RPC calls.  The reason for using the <<<AsyncCallback>>> in the server code is that it does not mix techniques of a call back (GWT Async Interface on client) and a function call (GWT Service Interface on server).  Keeping the server code as a call back is felt by WoOF to make the coding more intuitive.


application.woof

  The following demonstrates the configuration for adding the template for this tutorial (via the {{{../../eclipse/index.html}WoOF Eclipse Plug-in}}):
  
[./images/GwtService-add-template-dialog.png] GwtService Add template dialog screenshot.

  The WoOF Eclipse Plugin will automatically create the appropriate GWT <<<*.gwt.xml>>> configuration file.  
  
  The GWT Async Interfaces must also be specified, so that they can be automatically setup for servicing the GWT RPC calls by the template logic class methods.  This means that there is significantly less configuration necessary to use GWT with WoOF than with JEE (especially in not having to configure the HttpServlets).  
  
  When using WoOF within a JEE Servlet container the only configuration necessary is the initial WoOF Servlet Filter to plug-in the WoOF functionality, as WoOF takes care of the GWT configuration.
  


Client side logic

  The client side logic follows standard GWT coding and involves the following classes. 

*Result

  Object used as payload to communicate response from server.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/client/Result.java}

*GWT EntryPoint

  Provides the client side logic.  See {{{http://code.google.com/webtoolkit/doc/latest/tutorial/gettingstarted.html}GWT getting started}} for more details.  However notice the <<<GWT.create(...)>>> call to create the service, its use later in the code to send an attempt to the server and handling the server response via a call back.   

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtservice/client/GwtAppEntryPoint.java}


Unit Testing

  The following unit test shows the use of <<<SyncProxy>>> to test the servicing of the GWT RPC call by the server.
  
%{code-snippet|brush-autodetect=1|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/gwtservice/GameTest.java}

Next

  See the {{{../index.html}other tutorials}} for further functionality.

