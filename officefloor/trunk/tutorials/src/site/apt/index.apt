				       ------------------
				      OfficeFloor Tutorials
				       ------------------
				      Daniel Sagenschneider
				       ------------------
               
  <<OfficeFloor Tutorials>>
  
  Once you have installed the {{{../install.html}OfficeFloor Eclipse plug-ins}} (by dragging the bottom left install icon to your Eclipse IDE) you have the tools ready for the below tutorials.
  
  The tutorials are ordered so that each builds on the knowledge of the previous tutorials.  It is therefore best to work though them in order.  Please however feel free to jump between them to get a feel for OfficeFloor.


  
WoOF

  The following tutorials cover developing OfficeFloor (WoOF) web applications.

  The acronym <WoOF> standards for <Web on OfficeFloor>.  It is a set of prefabricated plug-ins for OfficeFloor that enables OfficeFloor to work as a high performance Web Application Server.  As you become more familiar with OfficeFloor, you will realise OfficeFloor is a very light weight and versatile plugin application framework that provides {{{../mission.html}open integration of software}}.

*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
|| Tutorial                                                    || Description                                               || Covered
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{../maven/woof-archetype/index.html}My first WoOF application}} | Walks through the simple steps to create and run an OfficeFloor (WoOF) web application. | {{{http://maven.apache.org}Maven}} and {{{http://eclipse.org}Eclipse}} plug-ins |
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./PrototypeHttpServer/index.html}Wireframe prototyping}}  | Build working web prototypes and then later extend into a working web application.  | #\{link\}
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./DynamicHttpServer/index.html}Dynamic web page}}         | Rendering dynamic content.                                 | $\{bean ... $\} , $\{property\}
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./InteractiveHttpServer/index.html}Interactive web page}} | Handling of requests to provide interactive pages.         | #\{link\} , @HttpParameters
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./NavigateHttpServer/index.html}Dynamic navigation between pages}}  | Controlling the navigation between pages.        | @NextTask , @FlowInterface
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./SessionHttpServer/index.html}Session state}}            | Storing state between requests within the HTTP session.    | @HttpSessionStateful
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./ExceptionHttpServer/index.html}Exception handling}}     | Handling exceptions.                                       | @Parameter
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./RawHttpServer/index.html}Generating HTML}}              | Render generated HTML.                                     | @UnescapedHtml
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./SectionHttpServer/index.html}Sectioning content}}       | Sectionally rendering content.                             | \<!-- {section} --\>
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+



GWT integration

  The following tutorials cover integration of {{{http://gwt.google.com}GWT}} with WoOF to provide Rich Internet Applications (RIA).
  
  There is no requirement to use GWT as you can use javascript directly in the HTML pages.  If however you choose to use GWT, it is integrated into WoOF to simplify development and allow all code to be in one language for easier support.

*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
|| Tutorial                                                    || Description                                               || Covered
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./GwtApp/index.html}Generation of client side JavaScript}} | Easy configuration of GWT to generate JavaScript within the page | EntryPoint
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./GwtService/index.html}AJAX via GWT RPC}} | Provides easy implementation of both AJAX functionality within the page and servicing by the server | Service Async Interface
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+



AJAX push (reverse AJAX, Comet)

  OfficeFloor is a multi-threaded container allowing methods to be executed by different threads.  As OfficeFloor is not limited by the Thread-per-Request architecture, it makes implementing AJAX push applications significantly easier.  The following tutorials show the ease in which events can be pushed out to web clients in real-time.

*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
|| Tutorial                                                    || Description                                               || Covered
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./CometApp/index.html}Comet}} | Shows the ease of using Comet (AJAX push) with WoOF | OfficeFloorComet
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./CometManualApp/index.html}Server events}} | Demonstrates the ease of publishing events | @Comet
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
  


Inversion of Control

  The previous tutorials have covered the built in dependency objects for WoOF.  They have also covered Continuation Injection and Operation Orchestration.
  
  The following tutorials focus on extending the web application's functionality by using further inversion of control features of OfficeFloor.
  
*----------------------------------------------------------+-----------------------------------------------------------+
|| Tutorial                                                || Description                                             
*----------------------------------------------------------+-----------------------------------------------------------+
| {{{./DatabaseHttpServer/index.html}Dependency Injection}}  | Dependency injecting customised objects.
*----------------------------------------------------------+-----------------------------------------------------------+
| {{{./TransactionHttpServer/index.html}Transaction management}}  | Managing transactions with Governance.
*----------------------------------------------------------+-----------------------------------------------------------+
| {{{./TeamHttpServer/index.html}Thread Injection}}        | Thread injection to performance tune the application.
*----------------------------------------------------------+-----------------------------------------------------------+



WoOF and a JEE Servlet Container

  These tutorials explain how to make use of WoOF within a JEE Servlet Container.  They also explains how to migrate a Servlet application to run within OfficeFloor for OfficeFloor's inversion of control benefits.

*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
|| Tutorial                                                || Description                                              || Covered
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./WoofServletWebApplication/index.html}Running within Servlet Container}}  | Running the above web functionality within a JEE Servlet container. | WoofServlet
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./WoofServletJspIntegration/index.html}Integration with a Java Server Page (JSP)}}  | Enables re-use of an existing JSP by providing it the necessary beans. | @HttpApplicationStateful, @HttpSessionStateful, @HttpRequestStateful
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./WoofServletDependencyInjection/index.html}Utilising dependency injection of the Servlet Container}}  | Use of Servlet container dependency injection (e.g. making use of EJBs). | @EJB
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./WoofServletMigration/index.html}Embedding Servlet Container within WoOF}}  | Embedding Servlet functionality within WoOF. | ServletContainerWoofApplicationExtensionService
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./WoofServletMigration/migrate.html}Migrate JEE Servlet application to run in OfficeFloor}}  | Migrating an exsting JEE Servlet application to run within OfficeFloor as a WoOF application. |
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+



Security

  Securing web applications should not require <hoping> its configured correctly in some external configuration file.  The following tutorials cover the ease of securing web applications built with WoOF and demonostrates the certainty you will have in it being right.

*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
|| Tutorial                                                    || Description                                               || Covered
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./SecurePageHttpServer/index.html}Secure Page}} | Shows the ease of securing a page | Template Secure
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./SecureLinkHttpServer/index.html}Secure Link}} | Demonstrates the ease of securing a link | Link Secure
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./AuthenticationHttpServer/index.html}Authentication}} | Easy means to provide authentication | Authentication
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+


