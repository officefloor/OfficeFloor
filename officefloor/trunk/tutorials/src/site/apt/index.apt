				       ------------------
				         WoOF Tutorials
				       ------------------
				      Daniel Sagenschneider
				       ------------------
               
  <<Web on OfficeFloor (WoOF) Tutorials>>
  
  The tutorials below providing working examples and explanations of the features of WoOF.

  
Basics

  The following tutorials cover the basics for developing WoOF web applications.

*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
|| Tutorial                                                    || Description                                               || Covered
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{../maven/woof-archetype/index.html}My first WoOF application}} | Walks through the simple steps to create and run a WoOF application. | {{{http://maven.apache.org}Maven}} and {{{http://eclipse.org}Eclipse}} plug-ins |
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./PrototypeHttpServer/index.html}Wireframe Prototyping}}  | Build working web prototypes and then later extend into a working web application.  | #\{link\}
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./DynamicHttpServer/index.html}Dynamic web page}}         | Rendering of dynamic content.                              | $\{bean ... $\} , $\{property\}
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./InteractiveHttpServer/index.html}Interactive web page}} | Handling of requests to provide interactive pages.         | #\{link\} , @HttpParameters
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./NavigateHttpServer/index.html}Dynamic navigation between pages}}  | Controlling the navigation between pages.        | @NextTask , @FlowInterface
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./SessionHttpServer/index.html}Session state}}            | Storing state between requests within the HTTP session.    | @HttpSessionStateful
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./ExceptionHttpServer/index.html}Exception handling}}     | Handling exceptions.                                       | @Parameter
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./RawHttpServer/index.html}Generating HTML}}              | Render generated HTML.                                     | @UnescapedHtml
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./SectionHttpServer/index.html}Sectioning content}}       | Sectionally rendering content.                             | \<!-- {section} --\>
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+



GWT integration

  The following tutorials cover integration of {{{http://gwt.google.com}GWT}} with WoOF to provide Rich Internet Applications (RIA).

*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
|| Tutorial                                                    || Description                                               || Covered
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./GwtApp/index.html}Generation of client side JavaScript}} | Easy configuration of GWT to generate JavaScript within the page | EntryPoint
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./GwtService/index.html}AJAX via GWT RPC}} | Provides easy implementation of both AJAX functionality within the page and servicing by the server | Service Async Interface
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+



AJAX push (reverse AJAX, Comet)

  OfficeFloor is a multi-threaded container allowing methods to be executed by different threads.  As OfficeFloor is not limited by the Thread-per-Request architecture, it makes implementing AJAX push applications significantly easier.  The following tutorials show the ease in which events can be pushed out to web clients in real-time.
  
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
|| Tutorial                                                    || Description                                               || Covered
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./CometApp/index.html}Comet}} | Shows the ease of using Comet (AJAX push) with WoOF | OfficeFloorComet
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./CometManualApp/index.html}Server events}} | Demonstrates the ease of publishing events | @Comet
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+



WoOF running within a JEE Servlet Container

  Explans how to make use of WoOF within a JEE Servlet Container.

*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
|| Tutorial                                                || Description                                              || Covered
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./ServletFilterWebApplication/index.html}Running within Servlet Container}}  | Running the above web functionality within a JEE Servlet container. | WoofServletFilter
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./ServletFilterJspIntegration/index.html}Integration with a Java Server Page (JSP)}}  | Enables re-use of an existing JSP by providing it the necessary beans. | @HttpApplicationStateful, @HttpSessionStateful, @HttpRequestStateful
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./ServletFilterDependencyInjection/index.html}Utilising dependency injection of the Servlet Container}}  | Use of Servlet container dependency injection (e.g. making use of EJBs). | @EJB
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+



Dependency Injection

  Previous tutorials have covered the built in objects for WoOF's dependency injection.  The following tutorials focus on extending the web applications functionality by adding further objects for dependency injection.
  
*----------------------------------------------------------+-----------------------------------------------------------+
|| Tutorial                                                || Description                                             
*----------------------------------------------------------+-----------------------------------------------------------+
| {{{./DatabaseHttpServer/index.html}Dependency injection}}  | WoOF with dependency injection.
*----------------------------------------------------------+-----------------------------------------------------------+



Context

  The following tutorials cover configuring context for a OfficeFloor web application.

*----------------------------------------------------------+-----------------------------------------------------------+
|| Tutorial                                                || Description                                             
*----------------------------------------------------------+-----------------------------------------------------------+
| {{{./TransactionHttpServer/index.html}Transaction Management}}  | Managing transactions of an OfficeFloor web application.
*----------------------------------------------------------+-----------------------------------------------------------+



Thread Injection

  OfficeFloor provides thread injection.  This is an advanced feature of WoOF provided by its underlying OfficeFloor technology to allow tuning the web application to the hardware it is running on. 

*----------------------------------------------------------+-----------------------------------------------------------+
|| Tutorial                                                || Description
*----------------------------------------------------------+-----------------------------------------------------------+
| {{{./TeamHttpServer/index.html}Thread Injection}}        | WoOF with thread injection.
*----------------------------------------------------------+-----------------------------------------------------------+

