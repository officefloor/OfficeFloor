				       ------------------
				            Tutorials
				       ------------------
				      Daniel Sagenschneider
				       ------------------
  
  <<Quick Tutorials>>
  
  The tutorials below provide 2 minute overviews of various features and capabilities of OfficeFloor.
  
  Should you have any questions you can catch us online (click on the bottom right box and click on one of us to chat).  We are happy to assist in answering any questions, as we know that static documentation can never answer all questions.  If we all happen to be offline, please see {{{../getting-help.html}getting help}}.
  
  All tutorials have respective sources that can be downloaded and run with {{{http://maven.apache.org}Maven}}.  To view and run the tutorials within an IDE, use the appropriate Maven setup for the IDE (for example run <<<mvn eclipse:eclipse>>> to use within Eclipse).  Also installing the {{{../eclipse/index.html}Eclipse plug-ins}} will allow viewing the graphical configuration.

2 Minute Tutorials  

%{toc|fromDepth=2}

*WoOF (Web on OfficeFloor)

  The following tutorials cover the basics of using WoOF (Web on OfficeFloor) for building web applications.

*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
|| Tutorial                                                    || Description                                               || Covered
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./MyFirstWoofApp/index.html}My First WoOF App}}           | Walks through creating a very simple WoOF web application. |
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./DynamicHttpServer/index.html}Dynamic web page}}         | Rendering of dynamic content.                              | \<!-- {section} --\> , $\{property\}
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./PageFlowHttpServer/index.html}Interactive web page}}    | Handling of requests to provide interactive pages.         | #\{link\} , @HttpParameters
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./NavigateHttpServer/index.html}Navigate between pages}}  | Navigation between pages.                                  | @NextTask , @FlowInterface
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./SessionHttpServer/index.html}Session state}}            | Storing state between requests within the HTTP session.    | @HttpSessionStateful
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./ExceptionHttpServer/index.html}Exception handling}}     | Handling exceptions.                                       | @Parameter
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+
| {{{./StaticHttpServer/index.html}Running WoOF stand alone}}  | Running WoOF outside a JEE Servlet Container.              | mvn woof:run
*--------------------------------------------------------------+------------------------------------------------------------+------------------------------+



*WoOF running within a JEE Servlet Container

  Explans how to make use of WoOF within a JEE Servlet Container.

*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
|| Tutorial                                                || Description                                              || Covered
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./ServletFilterWebApplication/index.html}Running within Servlet Container}}  | Running the above web functionality within a JEE Servlet container. | WoofServletFilter
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./ServletFilterJspIntegration/index.html}Integration with a Java Server Page (JSP)}}  | Enables re-use of an existing JSP by providing it the necessary beans. | @HttpApplicationStateful, @HttpSessionStateful, @HttpRequestStateful
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+
| {{{./ServletFilterDependencyInjection/index.html}Utilising dependency injection of the Servlet Container}}  | Use of Servlet container dependency injection (e.g. making use of EJBs). | @EJB
*----------------------------------------------------------+-----------------------------------------------------------+------------------------------+



*Services

  The following tutorials focus on providing services when using WoOF outside of a JEE Servlet Container.
  
  Please note that current focus has been on running WoOF within a JEE Servlet Container and making use of the JEE application container services (e.g. EJBs).  As {{{http://java.sun.com/products/ejb/docs.html}EJB 3}} has now simplified creating and using managed services (EJBs), WoOF has focused on re-using this capability - especially as it allows re-use of existing EJBs.

*----------------------------------------------------------+-----------------------------------------------------------+
|| Tutorial                                                || Description                                             
*----------------------------------------------------------+-----------------------------------------------------------+
| {{{./DatabaseHttpServer/index.html}Dependency injection for functionality}}  | HTTP Server with dependency injection.
*----------------------------------------------------------+-----------------------------------------------------------+



*Threading

  OfficeFloor provides the ability for multi-threaded services.
  
  Running applications within a JEE Servlet Container typically assumes a single thread for servicing each request - due to the heavy reliance on ThreadLocal variables.  OfficeFloor at is foundation is a multi-threaded container that does not have this constraint.  The below tutorials show how to use the multi-threaded nature of OfficeFloor.

*----------------------------------------------------------+-----------------------------------------------------------+
|| Tutorial                                                || Description                                             
*----------------------------------------------------------+-----------------------------------------------------------+
| {{{./TeamHttpServer/index.html}Team allocation within HTTP server}}  | HTTP Server with assignment of team to execute tasks.  A Team within OfficeFloor is in effect a thread pool and is the means to assign specific threads (thread pools) to execute specific tasks.
*----------------------------------------------------------+-----------------------------------------------------------+



Future Features

  Current focus of features being developed (or documented as tutorials) can be found at {{{http://sourceforge.net/tracker/?func=browse&group_id=156349&atid=799429&status=1}OfficeFloor features}}.

