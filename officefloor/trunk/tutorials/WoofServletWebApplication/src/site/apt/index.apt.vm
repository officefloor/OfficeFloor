                                               -----------------------
                                      WoOF within JEE Servlet Container Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<WoOF within JEE Servlet Container Tutorial>>

  This tutorial demonstrates running a WoOF web application within a JEE Servlet container.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/ServletFilterWebApplication/${projectVersion}/ServletFilterWebApplication-${projectVersion}-project.zip/download}Download Tutorial Source}}


WoofServletFilter

  The {{{/apidocs/net/officefloor/plugin/woof/servlet/WoofServletFilter.html}WoofServletFilter}} is a Servlet Filter which provides the necessary hooks for running WoOF within a JEE Servlet container.
  
  The following is the configuration for this tutorial.

[./images/servlet-woof.png] application.woof configuration.

  The above configuration provides the following:
  
   * OfficeFloor dynamic web template
   
   * Rendering of a JSP (by the Servlet container) as a navigation link from the above web template
   
   * Utilising a class method <<<example(...)>>> to service the uri <<</class>>>
   
  For further explanation of the above WoOF configuration see the previous tutorials.
  
  Within a JEE Servlet Container WoOF defers to the JEE Servlet Container to provide the resources.  The ability to link to Servlet container resources (e.g. JSPs, Servlets, static pages, etc) is provided to allow introducing WoOF into JEE web applications without having to rewrite the web applications.  WoOF will also happily co-exist with other frameworks within a Servlet container.


Configuring the WoofServletFilter

  To configure the {{{/apidocs/net/officefloor/plugin/woof/servlet/WoofServlet.html}WoofServlet}} into an application add the following dependency to the project.  The JAR for the dependency contains a <<<web-fragment.xml>>> which will automatically configure the necessary components to run WoOF within the JEE Servlet Container. 
  
%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/pom.xml}

  The resulting <<<web.xml>>> for the example of this tutorial is therefore:

%{code-snippet|brush-autodetect=1|file=${basedir}/src/main/webapp/WEB-INF/web.xml}

  However should there be a need to configure the {{{/apidocs/net/officefloor/plugin/woof/servlet/WoofServlet.html}WoofServlet}} manually, please ensure it is configured as a <<<ServletContextListener>>> to allow it to configure itself.  WoOF will only service the requests it is configured to handle and lets the Servlet application handle the rest.


  
ExampleClass

  As per the above configuration, the following class directly handles a web request.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/woofservletwebapplication/ExampleClass.java}

  Running within a JEE Servlet container the {{{/apidocs/net/officefloor/plugin/socket/server/http/ServerHttpConnection.html}ServerHttpConnection}} implementation wraps the <<<ServletRequest>>> and <<<ServletResponse>>> so that existing stand-alone WoOF applications can be run.  It is the re-implementing of the base WoOF objects ( {{{/apidocs/net/officefloor/plugin/socket/server/http/ServerHttpConnection.html}ServerHttpConnection}} , {{{/apidocs/net/officefloor/plugin/web/http/session/HttpSession.html}HttpSession}} ) to use the JEE Servlet Container APIs that the JEE Servlet integration is achieved.



Remaining Code

  For completeness of this tutorial the remaining code is included below.
  
*Template.woof.html

  Has the <<< #\{LINK\} >>> for handling by the JSP.

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.woof.html}

*Template.jsp

  JSP run by Servlet Container.  WoOF navigates to this JSP based on the configuration above.

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.jsp}



Unit Test

  The unit test highlights the servicing of a request by:
  
   * Servlet container (for request not to be handled by WoOF as per its configuration)
  
   * WoOF dynamic template
   
   * Dynamic template link to be serviced by a JSP from the Servlet container
   
   * Request being serviced by a class

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/test/java/net/officefloor/tutorial/woofservletwebapplication/ExampleIT.java}


Next

  The {{{../WoofServletJspIntegration/index.html}next tutorial}} looks at making use of existing Java Server Pages (JSP).

