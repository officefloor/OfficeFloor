                                               -----------------------
                         Server Side Comet (AJAX push, reverse AJAX) Publish Application Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Server Side Comet Publish Application Tutorial>>

  This tutorial demonstrates the simplicity in publishing events from the Server to Comet clients (AJAX push, reverse AJAX) for applications built with WoOF.
  
  To demonstrate the ease of using Comet functionality on the Server Side within a WoOF application, the following simple chat application will be used for this tutorial:
  
[./images/CometManualApp-screenshot.png] CometManualApp screenshot.

  The application will:
  
    [[1]] Initially request your user name which is stored in the HTTP session
  
    [[1]] Send and receive chat messages identifying who sent each message
  
  The application in this tutorial is deliberately simple to allow focus on the Comet functionality.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/CometApp/${projectVersion}/CometApp-${projectVersion}-project.zip/download}Download Tutorial Source}}
  
Template.html

  The below is the content of the <<<Template.html>>>.  WoOF utilises {{{http://gwt.google.com}GWT}} for client side logic and the simple web page provides the necessary GWT hook (id="chat").  Please see the {{{../index.html}other tutorials}} for the ease of using {{{http://gwt.google.com}GWT}} with WoOF.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/Template.html}


TemplateLogic Class

  The logic object to provide the functionality has two methods:
  
    * method to login the user by storing their user name within the HTTP session
    
    * method to handle sending a message which adds the user name and is published by the Server

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/cometmanualapp/TemplateLogic.java}

  As you can see the necessary code to implement both setting the user name and publishing the comet event is very small and simple.  This is one of the principles underlying OfficeFloor framework to WoOF, which is to focus only on writing business logic and have OfficeFloor handle the "plumbing" code.  

  The following demonstrates the configuration necessary to add the template and giving WoOF the necessary understanding of the functionality to be supported:
  
[./images/CometManualApp-add-template-dialog.png] CometApp Add template dialog screenshot.

  This tutorial deals with only the comet functionality and configuration.  Please see the {{{../index.html}other tutorials}}} for explanation of the other configuration.
  
  Please note that for manually handling the published event from the Comet client, the method name on the logic object is specified.  This allows intercepting all published events from the clients and manually handling them, in the case of this example, adding the user name to the message before having the Server publish the method.  The parameter to this specified method is always a {{{/apidocs/net/officefloor/plugin/comet/internal/CometEvent.html}CometEvent}}.  It also follows the GWT RPC handling pattern by WoOF (see {{{../index.html}GWT tutorials}}) and therefore must notify that successfully serviced the GWT RPC request through the <<<AsyncCallback>>>.
  
  Beyond enhancing the published event, the typical other reason for manually handling the published events from the Comet client is to push them onto a queue for a cluster of webservers to subscribe to.  This enables multiple web servers to be notified of the published event and subsequently publish this to all the Comet clients.  This is necessary as the Comet client can only establish one connection which in a typical load balanced environment can be any one of the multiple web servers.



@CometPublisherInterface

  You will notice that in the method above that the following interface is used by the Server to publish the event (in this case the conversation message): 

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/cometmanualapp/client/ConversationSubscription.java}

  The annotation informs WoOF that for template logic methods with a parameter of this type, that a <<<Proxy>>> object is created that will publish the {{{/apidocs/net/officefloor/plugin/comet/internal/CometEvent.html}CometEvent}}.
  
  The interface with this annotation must adhere to the same rules of a {{{/apidocs/net/officefloor/plugin/comet/api/CometSubscriber.html}CometSubscriber}} (e.g. single method with a single parameter).
  
  The <<<Proxy>>> will publish the event with the following details:
  
   * Listener type: the interface type name
   
   * Data: the value of the first parameter
   
   * Filter Key: <<<null>>>
   
  The reason for using the interface is to allow type safe publishing of events.  This enables the following object to be constructed and passed to the <<<Proxy>>> with type safe compilation to reduce runtime issues.
  
%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/cometmanualapp/client/ConversationMessage.java}

  

User Name

  The user name is stored in the HTTP session with the following object (identicated by the annotation on the class).  See the {{{../index.html}HTTP Session tutorial}} regarding how this works. 

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/cometmanualapp/User.java}

  The following GWT RPC service is used to send the user name to the server.  Again, please see the {{{../index.html}GWT tutorials}} regarding how WoOF integrates with GWT making its use simple.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/cometmanualapp/client/UserNameService.java}

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/cometmanualapp/client/UserNameServiceAsync.java}




Client Side Code

  The GWT client side code is included as follows for completeness of this tutorial.  For more details on this, please see the {{{../index.html}GWT and Comet tutorials}}.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/cometmanualapp/client/CometManualAppEntryPoint.java}



Next

  See the {{{../index.html}other tutorials}} for further functionality.

