                                               -----------------------
                                 Comet (AJAX push, reverse AJAX) Application Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Comet Application Tutorial>>

  This tutorial demonstrates the simplicity in providing Comet (AJAX push, reverse AJAX) functionality to a web application built with WoOF.
  
  To demonstrate the ease of using Comet functionality within a WoOF application, the following simple chat application will be used for this tutorial:
  
[./images/CometApp-screenshot.png] CometApp screenshot.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/CometApp/${projectVersion}/CometApp-${projectVersion}-project.zip/download}Download Tutorial Source}}
  
Template.html

  The below is the content of the <<<Template.html>>>.  WoOF utilises {{{http://gwt.google.com}GWT}} for client side logic and the simple web page provides the necessary GWT hook (id="chat").  Please see the {{{../index.html}other tutorials}}} for the ease of using {{{http://gwt.google.com}GWT}} with WoOF.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/Template.html}
  


ConversationSubscription Class

  As a web browser typically will allow only two connections back to the server, a connection can not be used for each Comet subscription.  Therefore the Comet subscription is multiplexed over one of the connections leaving the other connection available for servicing the other web page requests.  To distinguish between subscriptions and allow type safety in publishing and subscribing to Comet events, each subscription is identified by an interface.  For this example the interface is as follows: 

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/cometapp/client/ConversationSubscription.java}

  The definition of the interface is relatively free to be defined per your need, however it must adhere to the following:
  
  * Must be an interface
  
  * May only have one method with a single parameter (the event payload)
  
  * Must extend <<<CometSubscriber>>> (necessary for GWT client side code generation)

  

EntryPoint Class

  The following class is the GWT <<<EntryPoint>>> class for this example and demonstrates how the above interface is used in both subscribing to Comet events and publishing Comet events from the client.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/cometapp/client/CometAppEntryPoint.java}

  The next sections explain how <<<OfficeFloorComet>>> is used for the subscription to Comet events and publication of Comet events.

* Comet Subscription

  The <<<OfficeFloorComet.subscribe(...)>>> method is provided the interface and an implementation of the interface to handle the event.  On the first subscribe, <<<OfficeFloorComet>>> will establish a connection with the server and start the long polling for events.  On receiving the event, <<<OfficeFloorComet>>> will appropriately invoke the handler (interface implementation) with the event and then send another long poll request for the next event.  This means that you need only provide the handler for events and not worry about the "plumbing" necessary for Comet functionality.

  It is possible to subscribe to more than one interface within the same GWT client.  Please see the {{{../../apidocs/net/officefloor/plugin/comet/api/OfficeFloorComet.html}OfficeFloorComet API}} for further details regarding multiple subscriptions.
  
  In the case of this example, the handle of the event is simply appending the text as the next line in the conversation. 

* Comet Publication

  The <<<OfficeFloorComet.createPublisher(...)>>> method creates an implementation of the interface to enable publishing an event.  Events are sent immediately via the second connection from the browser and a response is immediately returned freeing the connection for other web browser requests.
  
  In the case of this example, the publish sends the message text to the server.  The server will then notify the appropriate subscribers of the event, which subsequently causes the conversation text box to be updated with the message.



Server Side

  The following demonstrates the configuration necessary for supporting Comet on the server:
  
[./images/CometApp-add-template-dialog.png] CometApp Add template dialog screenshot.

  Yes, just tick the box.
  
  There is no additional configuration or coding necessary to support a single server providing Comet functionality.



Next

  The {{{../CometManualApp/index.html}next tutorial}} looks at how the Server can publish events to Comet clients and also how the Server can intercept published events.

