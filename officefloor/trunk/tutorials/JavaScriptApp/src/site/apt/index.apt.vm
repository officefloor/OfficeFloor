                                               -----------------------
                                           JavaScript, AJAX, JSON Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<JavaScript, AJAX, JSON Tutorial>>

  
  This tutorial looks at using JavaScript within WoOF templates and interacting with the WoOF server by AJAX (by both HTTP parameters and JSON).

  To focus on JavaScript and AJAX, the below simple application will undertake adding or subtracting from a number.  While this can be accomplished client-side with JavaScript, the tutorial demonstrates AJAX by sending the calculation to the WoOF server to undertake.

[./images/JavaScriptApp-screenshot.png] JavaScriptApp screen shot.

  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/JavaScriptApp/${projectVersion}/JavaScriptApp-${projectVersion}-project.zip/download}Download Tutorial Source}}


  
JavaScript

  The below is the HTML and JavaScript for the page.  While production applications should use a JavaScript Framework (e.g. {{{http://jQuery.org}jQuery}}) to handle issues such as cross browser differences, the tutorial will use raw JavaScript to show it is JavaScript Framework agnostic.
  
  The reason that WoOF may use any JavaScript Framework is that it does not interpret the web page contents.  WoOF treats the content of a web page as text, providing only the necessary tag replacements.  In the case below, WoOF provides the URLs for the AJAX calls.  This means any JavaScript code (whether raw or part of a framework) may be included in the WoOF templates.  It even means that WoOF templates can be used for other content types such as XML.  The focus of this tutorial will be on including JavaScript within HTML web pages.

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/template.woof.html}

  The JavaScript assumes an HTML5 compliant browser.  Again it is recommended to use a JavaScript Framework to handle non-compliant browser issues.
  
  Different payload types (HTTP parameters and JSON) are used for the respective AJAX requests.  This is to demonstrate in the next sections how WoOF handles each payload type.
  
  
  
AJAX with HTTP parameters

  The handling HTTP parameters in the AJAX request is very similar to handling HTML form submissions.  The difference is that the default behaviour of re-rendering the template's content is to be avoided.  To avoid re-rendering the template's content the below annotation is added to the servicing method to flag to not re-render the template.

%{code-snippet|brush-autodetect=1|id=HttpParameters|file=${basedir}/src/main/java/net/officefloor/tutorial/javascriptapp/TemplateLogic.java}



AJAX with JSON

  To handle JSON content in both the request and response, the JSON content is mapped from Java Objects.  The below demonstrates the:
  
   * annotation on the parameter class to have the injected object into the servicing method loaded with the JSON content from the HTTP request
   
   * <<<JsonResponseWriter>>> to write the JSON content to the HTTP response.
   
  Note that there is no annotation on the servicing method to avoid re-rendering the template.  WoOF identifies the method is servicing an AJAX request by the presence of a <<<JsonResponseWriter>>> parameter.  WoOF will therefore not re-render the template and therefore only return the JSON content as the HTTP response entity.

%{code-snippet|brush-autodetect=1|id=HttpJson|file=${basedir}/src/main/java/net/officefloor/tutorial/javascriptapp/TemplateLogic.java}

  The underlying implementation of JSON to Java Object mapping is via {{{http://wiki.fasterxml.com/JacksonHome}Jackson}}.  Please see their documentation regarding additional annotations available to Java Objects to fine tune mapping of JSON to/from Java Objects.



Unit Test

  The following unit tests manually making the AJAX calls to the WoOF server and verifying the correct responses.

%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/javascriptapp/JavaScriptAppTest.java}



Next

  The {{{../GwtApp/index.html}next tutorial}} looks at using GWT for generating JavaScript.

