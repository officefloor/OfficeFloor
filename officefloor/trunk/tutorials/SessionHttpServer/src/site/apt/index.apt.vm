                                               -----------------------
                                             Session HTTP Server Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Session Http Server Tutorial>>

  This tutorial demonstrates maintaining state within the HTTP session.
  
  The example application for this tutorial will show a list of postings as follows:
  
[./images/SessionHttpServer-screenshot.png] SessionHttpServer screen shot.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/SessionHttpServer/${projectVersion}/SessionHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}


  
Template.html

  The template for displaying the posts and adding posts is as follows:

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/Template.html}



@HttpSessionStateful

  Session objects within WoOF are dependency injected.  The following POJO shows the annotation necessary to dependency inject it and also store it within the HTTP session.  Note HTTP session objects must also be serializable.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/sessionhttpserver/Posts.java}

  WoOF will do the following:
  
    [[1]] Check the HTTP Session to see if the object is previously bound.  If so it uses the bound object.
    
    [[1]] If not bound, the object is instantiated by its default constructor and bound to the HTTP Session.  It is then used.
    
  The logic for the template is as follows.  The <<<Posts>>> parameter is dependency injected following the above steps.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/sessionhttpserver/TemplateLogic.java}

  The dependency injection provides compile safe code without requiring to:
  
   * retrieve the object via a string identifier from the HTTP session
   
   * having to cast the object to its specific type
  
  WoOF will provide a unique name based on the object's type to bind the object within the HTTP session.  This can however be overridden by providing a name to the annotation.

  For completeness the <<<Post>>> object containing the posted information is as follows: 

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/sessionhttpserver/Post.java}



Unit Test

  WoOF again allows easy unit testing by it's dependency injection of POJOs:
  
%{code-snippet|brush-autodetect=1|id=pojo|file=${basedir}/src/test/java/net/officefloor/tutorial/sessionhttpserver/SessionHttpServerTest.java}



Next

  The {{{../ExceptionHttpServer/index.html}next tutorial}} will look at exception handling.
