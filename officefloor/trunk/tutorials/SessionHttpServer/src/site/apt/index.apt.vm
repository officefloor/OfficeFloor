                                               -----------------------
                                             Session HTTP Server Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Session Http Server Tutorial>>

  This tutorial demonstrates maintaining state within the HTTP session.
  
  The example application for this tutorial will show a list of postings as follows:
  
[./images/SessionHttpServer-screenshot.png] SessionHttpServer screen shot.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/SessionHttpServer/${projectVersion}/SessionHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}


  
Template.html

  The template for displaying the posts and adding posts is as follows:

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/Template.html}



@HttpSessionStateful

  Session objects within WoOF are dependency injected much like all dependencies within the underlying OfficeFloor framework.  The following POJO shows the annotation necessary to make the dependency object be stored within the session between requests (note session objects must also be serializable):

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/sessionhttpserver/Posts.java}

  WoOF will do the following:
  
    [[1]] Check the HTTP Session to see if the object has been previously been bound, if so it uses the bound object
    
    [[1]] If not bound, the object is instantiated by its default constructor, bound to the HTTP Session for further requests and then used
    
  Again method dependency injection is used to make the session object available.  The logic for the template is as follows and you can see the <<<Posts>>> parameter identifying it to be dependency injected (and with its annotation) as a session bound object.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/sessionhttpserver/TemplateLogic.java}

  The reason for providing the session object as such is to provide compile safe code without requiring to:
  
   * retrieve the object via a compile unsafe string identifier
   
   * having to cast the object to its specific type
   
  Typically within a WoOF application there are a small number of session objects (possibly even one) that are loaded with further objects to provide the state for the session.  This is just the case with this example that has the <<<Posts>>> object containing multiple <<<Post>>> objects.  This allows for compile safe session objects and template logic code (i.e. no referencing session objects by string identifier or having to cast it to a specific type is required).

  Submitting requests for adding a post is beyond the scope of this tutorial as is covered in {{{../PageFlowHttpServer/index.html}another tutorial}}.  However for completeness the <<<Post>>> object providing the submitted HTTP parameters is as follows: 

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/sessionhttpserver/Post.java}



Unit Test

  WoOF again allows easy unit testing of <<<TemplateLogic>>> because of its compile safe coding of POJOs:
  
%{code-snippet|brush-autodetect=1|id=pojo|file=${basedir}/src/test/java/net/officefloor/tutorial/sessionhttpserver/SessionHttpServerTest.java}



Next

  The {{{../ExceptionHttpServer/index.html}next tutorial}} will look at exception handling.
