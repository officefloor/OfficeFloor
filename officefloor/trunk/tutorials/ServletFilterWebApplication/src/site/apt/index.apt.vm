                                               -----------------------
                                      WoOF within JEE Servlet Container Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<WoOF within JEE Servlet Container Tutorial>>

  This tutorial demonstrates running a WoOF web application within a JEE Servlet container.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/ServletFilterWebApplication/${projectVersion}/ServletFilterWebApplication-${projectVersion}-project.zip/download}Download Tutorial Source}}


WoofServletFilter

  The {{{/apidocs/net/officefloor/plugin/woof/servlet/WoofServletFilter.html}WoofServletFilter}} is a Servlet Filter which provides the necessary hooks for running WoOF within a JEE Servlet container.
  
  The following is the configuration for this tutorial.

[./images/servlet-woof.png] application.woof configuration.

  The above configuration provides the following:
  
   * OfficeFloor dynamic web template
   
   * Rendering of a JSP (by the Servlet container) as a navigation link from the above web template
   
   * Utilising a class method <<<example(...)>>> to service the uri <<</class>>>
   
  For further explanation of the above WoOF configuration see the previous tutorials.
  
  Within a JEE Servlet Container WoOF defers to the JEE Servlet Container to provide the resources.  The ability to link to Servlet container resources (e.g. JSPs, Servlets, static pages, etc) is provided to allow introducing WoOF into JEE web applications without having to rewrite the web applications.  WoOF will also happily co-exist with other frameworks within a Servlet container.


web.xml

  The following highlighted configuration adds the {{{/apidocs/net/officefloor/plugin/woof/servlet/WoofServletFilter.html}WoofServletFilter}} to the <<<web.xml>>> for running WoOF within the Servlet container.

%{code-snippet|sh-params=highlight:[4,5,6,7,8,9,10,11]|brush-autodetect=1|file=${basedir}/src/main/webapp/WEB-INF/web.xml}

  WoOF's filter mapping should be <<</*>>> so that it can intercept each request.  WoOF will however only service the requests it is configured to handle and let the Servlet application handle the rest.


  
ExampleClass

  As per the above configuration, the following class directly handles a web request.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/servletfilterwebapplication/ExampleClass.java}

  Running within a JEE Servlet container the {{{/apidocs/net/officefloor/plugin/socket/server/http/ServerHttpConnection.html}ServerHttpConnection}} implementation wraps the <<<ServletRequest>>> and <<<ServletResponse>>> so that existing stand-alone WoOF applications can be run.  It is the re-implementing of the base WoOF objects ( {{{/apidocs/net/officefloor/plugin/socket/server/http/ServerHttpConnection.html}ServerHttpConnection}} , {{{/apidocs/net/officefloor/plugin/web/http/session/HttpSession.html}HttpSession}} ) to use the JEE Servlet Container APIs that the JEE Servlet integration is achieved.



Remaining Code

  For completeness of this tutorial the remaining code is included below.
  
* Template.woof.html

  Has the <<< #\{link\} >>> for handling by <<<ExampleTemplateLogic>>>.

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.woof.html}

* ExampleTemplateLogic

  Identifies that the <<<link>>> in the above template should be handled by the <<<LINK>>> output.  The above configuration maps this to a JSP for the response.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/servletfilterwebapplication/ExampleTemplateLogic.java}

* Template.jsp

  JSP run by Servlet Container.  WoOF navigates to this JSP in the above configuration.

%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.jsp}

* MockHttpServlet

  This is included to know when a request is being serviced by the Servlet container (and not OfficeFloor).

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/servletfilterwebapplication/MockHttpServlet.java}



Unit Test

  The unit test highlights the servicing of a request by:
  
   * Servlet container (for request not to be handled by WoOF as per its configuration)
  
   * WoOF dynamic template
   
   * Dynamic template link to be serviced by a JSP from the Servlet container
   
   * Request being serviced by a class

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/test/java/net/officefloor/tutorial/servletfilterwebapplication/ExampleIT.java}


Next

  The {{{../ServletFilterJspIntegration/index.html}next tutorial}} looks at making use of existing Java Server Pages (JSP).

