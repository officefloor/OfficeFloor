                                               -----------------------
                                             Exception Handling Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Exception Handling Tutorial>>

  This tutorial demonstrates the ease in handling exceptions within an WoOF web application.
  
  The tutorial will demonstrate this by a template method throwing an exception that is handled by writing the exception to <<<stderr>>>.  Though this is a simple example it does demonstrate the ease of handling exceptions.
  
  This tutorial also introduces the <<<@Parameter>>> annotation to allow passing an object between methods.

  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/ExceptionHttpServer/${projectVersion}/ExceptionHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}



Template throwing exception

  The following is the template:
  
%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Template.woof.html}

  with the logic throwing the exception:
  
%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/exceptionhttpserver/TemplateLogic.java}

  Pressing the submit button will trigger the exception to be thrown.  
  
  The tutorial will demonstrate the ease in which this exception can be handled.
  


Exception handling configuration
  
  The following shows the configuration for handling the above template exception.
  
[./images/ExceptionHttpServer-screenshot.png] ExceptionHttpServer screenshot.

  The exception being handled is an <<<SQLException>>>.  To add the exception right click and add exception.
  
  The exception is linked to the <<<Handler>>>.  The <<<Handler>>> is the following POJO.  It is added as a class section (right click and add section).
  
%{code-snippet|brush-autodetect=1|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/exceptionhttpserver/ExceptionHandler.java}

  As per the configuration above, the <<<handleSqlException>>> method is invoked to handle the <<<SQLException>>>.
  
  Once the method completes it follows normal WoOF behaviour.  In other words, the <<<@NextTask>>> annotation is honoured resulting in the static error page being sent to the client.



@Parameter
  
  The <<<@Parameter>>> annotation identifies a value to be passed from the previous task.
  
  The handling of an exception is actually via OfficeFloor functionality.  The exception is caught by WoOF and passed as a parameter to the configured task.  In this case, the <<<handleSqlException(...)>>> method.
  
  The <<<@Parameter>>> annotation can also be used to obtain the value from the following:
  
   * receive the exception being handled (as in above example)
  
   * return value from the previous method
   
   * parameter to a <<<@FlowInterface>>> method
   
  This functionality is useful and provided by the underlying OfficeFloor framework.  However, within WoOF the necessity to pass parameters is used typically only for exception handling.  The use of dependency injected objects is typically a better way to pass state between methods (i.e. {{{/apidocs/net/officefloor/plugin/web/http/application/HttpRequestStateful.html}HttpRequestStateful}}).



Resource
  
  The remaining configuration indicates that the <<<TechnicalFault>>> should send the following static response.
  
%{code-snippet|brush=xml|file=${basedir}/src/main/webapp/Error.html}

  It is possible to use the details of the exception within a template to generate a response.  For simplicity of this tutorial however a static resource is used (right click and add resource).



Unit Test

  The following unit test shows the exception handling by listening in on <<<stderr>>> to ensure the exception message is written to it:
  
%{code-snippet|brush-autodetect=1|id=handle|file=${basedir}/src/test/java/net/officefloor/tutorial/exceptionhttpserver/ExceptionHttpServerTest.java}

  

Next

  The basic web page functionality has now been covered. Please look at the {{{../index.html}other tutorials}} for further features of OfficeFloor.

