                                               -----------------------
                                               GWT Application Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<GWT Application Tutorial>>

  This tutorial demonstrates the simplicity in using {{{http://gwt.google.com}Google Web Toolkit (GWT)}} with WoOF to create Rich Internet Applications (RIA).
  
  The example used in this tutorial is the following simple page to show the seconds since the page load:
  
[./images/GwtApp-screenshot.png] GwtApp screenshot.
    
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/GwtApp/${projectVersion}/GwtApp-${projectVersion}-project.zip/download}Download Tutorial Source}}
  
Template.html

  The below is the content of the <<<Template.html>>>.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/Template.html}

  The thing to notice with the template is that it only has the single GWT hook (id="timer").  The other GWT aspects (such as the \<script\> tag to include the GWT JavaScript) is not present.  This is because WoOF will automatically add these GWT aspects on rendering the page so that you need only provide the necessary <id="xxx"> hooks for GWT.

EntryPoint Class

  Before discussing the Java code for GWT compilation, a very quick summary of the relevant GWT capabilities is provided below (see {{{http://code.google.com/webtoolkit/overview.html}GWT Overview}} for more in depth documentation of GWT):
  
    * GWT compiles Java code into JavaScript
   
    * The <EntryPoint.onModuleLoad()> method provides the starting point for running the functionality within the web page
   
    * <RootPanel.get("xxx")> is a static method providing the means to obtain the panel within the HTML identified by an <id> attribute - in this tutorial's case <<< \<p id="timer"\> >>>
   
    * GWT generated JavaScript will dynamically add the necessary HTML for displaying the components as specified in by the compiled Java code
   
  This very quick overview was provided to help (should you not be familiar with GWT) to understand the following Java code to be compiled by GWT into JavaScript.  The result of the code is that it indicates the time in seconds since page load: 

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/gwtapp/client/GwtAppEntryPoint.java}

  The code provides the time in seconds since page load by:

    [[1]] Obtaining the <<< \<p id="timer"\> >>> HTML element
    
    [[1]] Adding a label to the contents of the <<< \<p\> >>> element to indicate the number of seconds since page load
    
    [[1]] Starting a timer that triggers each second to increment the number displayed by the label - thus indicating the number of seconds since loading the page
    
    

application.woof

  Normally with GWT applications you are required to provide a <<<Module.gwt.xml>>> file that indicates to GWT on how to compile and create the JavaScript for the web page.  WoOF makes the GWT integration simpler by generating this file for you.
  
  All that is necessary to provide GWT functionality onto the page is specifying the <<<EntryPoint>>> class when adding the template.  The following demonstrates the configuration for adding the template for this tutorial:
  
[./images/GwtApp-add-template-dialog.png] GwtApp Add template dialog screenshot.

  On creating the template, WoOF will automatically generate the <<<Module.gwt.xml>>> file (following {{{http://maven.apache.org}Maven}} project structures - i.e. <<<src/main/resources>>>) for GWT compilation.  You may change this file to provide further GWT functionality, however please do not change the following values as WoOF manages these for you to simplify the GWT integration:
  
    * rename-to attribute
    
    * entry-point class attribute
  
  Therefore to use GWT to compile the Java to JavaScript and be available to your WoOF application, add the following to your <<<pom.xml>>>:
  
%{code-snippet|brush-autodetect=1|id=GwtPlugin|file=${basedir}/pom.xml}
   
  Please note that when running within a JEE Servlet Container, remove the <<<PUBLIC>>> to have the content available through the <<<ServletContext>>>.  Please refer to the {{{../index.html}JEE Servlet tutorials}} for more information.

  To also make the GWT Java classes available for coding against, add the following GWT dependency (with appropriate <<<version>>>):
  
%{code-snippet|brush-autodetect=1|id=GwtDependency|file=${basedir}/pom.xml}



Next

  The {{{../GwtService/index.html}next tutorial}} looks at the simplified support WoOF provides for GWT RPC calls (AJAX) on the Server.

