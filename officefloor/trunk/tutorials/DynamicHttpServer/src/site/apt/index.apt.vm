                                               -----------------------
                                             Dynamic HTTP Server Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Dynamic Http Server Tutorial>>

  This tutorial demonstrates the simplicity in creating dynamic content for a web application.  The example below will be a simple dynamic page to show the current time and the listing of System properties.  This will illustrate the following:
  
    * <<< <!-- \{section\} --> >>> and <<< $\{property\} >>> : which are 2 of the only 3 instrumentation types necessary in the HTML for building web applications
    
    * <<<application.woof>>> : graphically configuring your web application
  
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/DynamicHttpServer/${projectVersion}/DynamicHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}
  
Template.html

  The below is the content of the <<<Template.html>>>.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/Template.html}

  First thing to notice is that the template can be rendered in a web browser.  The reason for this is to ensure that web page content can be generated by WYSIWYG web page designer tools (such as {{{http://dreamweaver.com}DreamWeaver}}, {{{http://kompozer.net}KompoZer}}) and the template rendered in a web browser for quick checking.  This is deliberate to allow graphic designers to focus on presentation of the pages rather than having to understand scripting tags and to an extent programming constructs.  It also means the template can be viewed without having written any code.

  To provide the developer dynamic control of rendering the template, there are non-obtrusive hooks for controlling the dynamic rending of the page.  The two hooks used in the above template are:
  
   * <<< <!-- \{section\} --> >>> : which delimits content of the template into {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}} instances.  Note that it is only the task name surrounding by the brackets within the comment.  Adding other content outside the square brackets will have OfficeFloor consider it just a comment.
   
   * <<< $\{name\} >>> : which substitutes dynamic values for rending to the page
  
  The second hook just provides means to dynamically load bean property values from java classes into the page.  The first hook however is the important aspect as it delimits the template into sections for dynamic rendering.  The sections for the above example are:
  
   * <<<template>>> (name of first section)
   
   * <<<time>>>
   
   * <<<systemProperties>>>
   
   * <<<endSystemProperties>>>
   
  The content of these sections is after the delimiter to the next delimiter, so for <<<systemProperties>>> it would be:
  
+---------------------------------
        <tr>
            <td>${name}</td>
            <td>${value}</td>
        </tr>
+---------------------------------  	
  
TemplateLogic Class

  The <<<TemplateLogic>>> class has two methods that correspond to <<<Template.ofp>>> via naming conventions (method name is the template section name prefixed with <<<get>>> to obtain the java object providing the bean properties).  Note that only template sections containing a $\{tag\} entry must have a corresponding <<<getXxx()>>> method within the template logic class (i.e. note there is no <<<getEndSystemProperties()>>> method required).  Furthermore the binding is checked at start up for all templates so that missing properties are flagged immediately, which identifies additional properties added by a graphic designer that need to be included on the classes.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/dynamichttpserver/TemplateLogic.java}

  The <<<TemplateLogic>>> class has been kept simple in this example returning static content.  Use of dependency injection into the methods will allow retrieving values from the HTTP session or database but is beyond the scope of this example.

  After instantiating a <<<TemplateLogic>>> via its default constructor, the execution of the template is as follows:
    
   [[1]] The <<<template>>> section of <<<Template.ofp>>> is rendered
   
   [[1]] <<<getTime()>>> is reflectively invoked on the <<<TemplateLogic>>> instance returning the <<<Time>>> object
   
   [[1]] The <<<time>>> section of <<<Template.ofp>>> is rendered replacing $\{time\} with the value returned from <<<getTime()>>> from above <<<time>>> object
   
   [[1]] <<<getSystemProperties()>>> is reflectively invoked on the <<<TemplateLogic>>> instance returning the <<<Property>>> array
   
   [[1]] The <<<systemProperties>>> section content from <<<Template.ofp>>> is rendered for each <<<Property>>> instance within the above returned array (in this case twice).  The <<< $\{name\} >>>, <<< $\{value\} >>> are replaced with the corresponding bean properties from the current <<<Property>>> instance being rendered.
   
   [[1]] The <<<endSystemProperties>>> section of <<<Template.ofp>>> is rendered
  
  Each of the above steps is its own {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}} within OfficeFloor and are strung together and executed sequentially to render the dynamic web page.  The order of {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}} execution can be altered along with having different threads execute each {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}}.  This however is beyond the scope of this example which was to show the break down of dynamic web page rendering into {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}} instances.

application.woof

  TODO provide explanation of configuring a Template graphically.

  The above code will start the HTTP Server with a dynamic template available at url <<<http://localhost:7878/example>>> where the web page is rendered from two template files:
  
   * <<<Template.ofp>>> which contains the HTML template.
   
   * <<<TemplateLogic.class>>> which contains the dynamic logic of the template.
   

Remaining classes

  The remaining classes follow the java bean conventions and are included below for completeness of the example.

* Time class

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/dynamichttpserver/Time.java}

* Property class

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/dynamichttpserver/Property.java}

Unit Test

  TODO provide POJO unit testing of TemplateLogic.

  The unit test requests the dynamic web page from the HTTP Server.

%{code-snippet|brush-autodetect=1|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/dynamichttpserver/DynamicHttpServerTest.java}

Next

  TODO next tutorial
