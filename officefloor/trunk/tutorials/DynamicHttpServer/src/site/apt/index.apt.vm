                                               -----------------------
                                             Dynamic HTTP Server Tutorial 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Dynamic Http Server Tutorial>>

  This tutorial demonstrates the simplicity in creating dynamic content for a web application.  The example below will be a simple dynamic page to show the current time and the listing of System properties.  This will illustrate the following:
  
    * <<< <!-- \{section\} --> >>> and <<< $\{property\} >>> : which are 2 of the only 3 instrumentation types necessary in the HTML for building web applications
    
    * <<<application.woof>>> : for graphically configuring your web application
  
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/DynamicHttpServer/${projectVersion}/DynamicHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}
  
Template.html

  The below is the content of the <<<Template.html>>>.

%{code-snippet|brush=xml|file=${basedir}/src/main/resources/Template.html}

  First thing to notice is that the template can be rendered in a web browser.  The reason for this is to ensure that web page content can be generated by web page designer tools (such as {{{http://dreamweaver.com}DreamWeaver}}, {{{http://kompozer.net}KompoZer}}) and the template rendered in a web browser for quick checking.  This is deliberate to allow graphic designers to focus on presentation of the pages rather than having to understand scripting tags and to an extent programming constructs.  It also means the template can be viewed without having written any code.

  To provide the developer dynamic control of rendering the template for the functionality to the web application, there are non-obtrusive hooks for controlling the rending of the page.  The two hooks used in the above template are:
  
   * <<< <!-- \{section\} --> >>> : which delimits content of the template into sections.  Rather than trying to integrate directly with the HTML elements which in many frameworks means adding quite evasive tags through the HTML making it difficult to use web design tools, WoOF leaves the HTML to these design tools and just focuses on breaking it into sections to be managed by the control logic for sending to the web browser.  It is this focus that keeps WoOF simple and allows for the loosely coupled separation of roles between Graphic Designers and Developers.
   
   * <<< $\{name\} >>> : which substitutes dynamic values for rending to the page
  
  The second hook just provides means to dynamically load bean property values from java classes into the page.  The first hook however is the important aspect as it delimits the template into sections for dynamic rendering.  The sections for the above example are:
  
   * <<<template>>> (name of first section if template does not start with a delimiter)
   
   * <<<time>>>
   
   * <<<systemProperties>>>
   
   * <<<endSystemProperties>>>
   
  The content of these sections is after the delimiter to the next delimiter, so for <<<systemProperties>>> it would be:
  
+---------------------------------
        <tr>
            <td>${name}</td>
            <td>${value}</td>
        </tr>
+---------------------------------  	

  By default the sections are rendered in the order as provided in the template.  There are means within the template logic class to skip sections, repeat sections and even execute the sections in completely different order.  This however will be discussed in later tutorials as the focus of this tutorial is to provide dynamic content onto the web page.


TemplateLogic Class

  The <<<TemplateLogic>>> class is just a POJO (plain old java object) and has two methods that correspond to <<<Template.html>>> via naming conventions (method name is the template section name prefixed with <<<get>>> to obtain the java object providing the bean properties for that section).  Note that only template sections containing a $\{tag\} entry must have a corresponding <<<getXxx()>>> method within the template logic class (i.e. there is no <<<getEndSystemProperties()>>> method required).  Furthermore to ensure integration between the Graphic Designer and the Developer without significant testing the bindings between the template and logic class are checked at start up so that missing section methods and properties are flagged immediately.  It is these binding checks that allow the two roles to work efficiently together.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/dynamichttpserver/TemplateLogic.java}

  The <<<TemplateLogic>>> class has been kept simple in this example returning static content.  Use of dependency injection into the methods will allow retrieving values from the HTTP session or database but is beyond the scope of this example.

  The rendering of the template is as follows:
  
   [[1]] A <<<TemplateLogic>>> instance is instantiated by its default constructor
  
   [[1]] The <<<template>>> section of <<<Template.html>>> is rendered
   
   [[1]] <<<getTime()>>> is reflectively invoked on the <<<TemplateLogic>>> instance returning the <<<Time>>> object
   
   [[1]] The <<<time>>> section of <<<Template.html>>> is rendered replacing $\{time\} with the value returned from <<<getTime()>>> from the above <<<time>>> object
   
   [[1]] <<<getSystemProperties()>>> is reflectively invoked on the <<<TemplateLogic>>> instance returning the <<<Property>>> array
   
   [[1]] The <<<systemProperties>>> section content from <<<Template.html>>> is rendered for each <<<Property>>> instance within the above returned array (this repeating sections for arrays makes rendering tables simple within WoOF).  The <<< $\{name\} >>>, <<< $\{value\} >>> are replaced with the corresponding bean properties from the current <<<Property>>> instance being rendered.
   
   [[1]] The <<<endSystemProperties>>> section of <<<Template.html>>> is rendered
  
  Each of the above steps is its own {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}} within OfficeFloor and are strung together and executed sequentially to render the dynamic web page.  A {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}} is the basic functional unit within OfficeFloor.  The order of {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}} execution can be altered along with having different threads executing each {{{/apidocs/net/officefloor/frame/api/execute/Task.html}Task}}.  This however is beyond the scope of this example which is to show dynamic content rendering through the conventions of a WoOF template.

application.woof

  Now that the <<<Template.html>>> and <<<TemplateLogic>>> class are available, they need to be configured into the WoOF application.  This configuration is within the <<<application.woof>>> file at the root of the class path (i.e. has no package prefix).  Under the hood this is an XML file, however OfficeFloor has a strong focus on not hand coding XML configuration files and provides Eclipse plug-ins for graphically configuration the web application.
  
  The reason for using graphical configuration is two fold:
  
    [[1]] XML configuration files are error prone and can become quite verbose making them difficult to manage
    
    [[1]] Graphical configuration allows other less technically inclined to review the configuration to ensure the web application is appropriately configured
    
  To use the graphical configuration of WoOF, please ensure you install the Eclipse plug-in.  Details of installing this can be found {{{/eclipse/index.html}here}}.
  
  Once the Eclipse plug-in is installed you will be able to use the new wizard (WoOF is typically under Other... and then OfficeFloor) to create the <<<application.woof>>> file.  On creating and opening there should be a blank editor.  Right clicking within the editor will bring up a context menu to add various items (most functionality within OfficeFloor editors are via the right click menus).  Adding the template will bring up the following dialog box:

[./images/add-template-dialog.png] Dialog to add a template.

  Clicking ok will add the template and result in the <<<application.woof>>> looking as follows:
  
[./images/woof.png] application.woof configuration.

  This is the only configuration necessary for this web application as the template will be made available at <<<http://localhost:7878/example>>> .  Further tutorials will look at linking page flows and dynamic behaviour however is beyond the scope of this tutorial.
   

Remaining classes

  The remaining classes follow the java bean conventions and are included below for completeness of the example.

* Time class

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/dynamichttpserver/Time.java}

* Property class

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/tutorial/dynamichttpserver/Property.java}

Unit Test

  As the template is just a POJO, WoOF adheres to OfficeFloor's focus on simplicity in testing.  The following example unit test shows the ease in which the <<<TemplateLogic>>> can be tested.

%{code-snippet|brush-autodetect=1|id=pojo|file=${basedir}/src/test/java/net/officefloor/tutorial/dynamichttpserver/DynamicHttpServerTest.java}

Next

  The {{{../PageFlowHttpServer/index.html}next tutorial}} will look at an interactive page.
