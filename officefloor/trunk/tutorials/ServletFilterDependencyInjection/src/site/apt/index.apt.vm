                                               -----------------------
                                        Servlet Filter Dependency Injection Example 
                                               -----------------------
					        Daniel Sagenschneider
                                               -----------------------

  <<Servlet Filter Dependency Injection Example>>

  This example demonstrates using the dependency injected objects (e.g. EJBs) from the Servlet container within the OfficeFloor web functionality.
  
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/example/ServletFilterDependencyInjection/${projectVersion}/ServletFilterDependencyInjection-${projectVersion}-project.zip/download}Download Example Source}}
  
Code

* Simple EJB to use for the example

  To illustrate using the Servlet container dependency injection, the following simple EJB will be used:
  
%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/servletfilterdependencyinjection/ExampleDependency.java}
  
  with a local interface as follows:

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/servletfilterdependencyinjection/ExampleDependencyLocal.java}

  and a returned object as follows (which is a simple POJO to be used to render the OfficeFloor dynamic web template):
  
%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/servletfilterdependencyinjection/Message.java}

* Making use of the EJB within the OfficeFloorServletFilter

  Making the above EJB available to the OfficeFloor web functionality is no different to making it available to any other Servlet component via dependency injection within a JEE application server.  The following example {{{/apidocs/net/officefloor/plugin/servlet/OfficeFloorServletFilter.html}OfficeFloorServletFilter}} is the only code necessary to make use of the above EJB:

%{code-snippet|sh-params=highlight:[3,4]|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/servletfilterdependencyinjection/ExampleFilter.java}
  
  On the Filter starting up, the Filter will automatically interrogate itself for Servlet container dependency injected objects to be used within the OfficeFloor web functionality.  The Filter will then make these available for dependency injection into the methods within OfficeFloor.  The following logic of the configured template shows the auto-wiring of the Servlet dependency injected object into the method:
  
%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/servletfilterdependencyinjection/ExampleTemplateLogic.java}

  The dynamic web template is as follows:
  
%{code-snippet|sh-params=highlight:[13]|brush=xml|file=${basedir}/src/main/resources/templates/Template.ofp}

  For further explanation of OfficeFloor dynamic web templates please see the specific examples as is beyond the scope of this example.
  
  Therefore to make use of your existing EJB service layer, you need only provide the field and its appropriate annotation to make it available for dependency injection into methods managed by the {{{/apidocs/net/officefloor/plugin/servlet/OfficeFloorServletFilter.html}OfficeFloorServletFilter}}.
  
  Please note that as JEE containers assume single threaded execution with heavy use of ThreadLocal variables, OfficeFloor will use the invoking Thread to execute all methods using a dependency from the Servlet container.  This is necessary to allow EJBs to pick up the appropriate context for executing correctly.  OfficeFloor will however allow multi-threading all other methods that do not use dependencies from the JEE container.
  

* Remaining Code  

  For completeness of the example the remaining code is included below.
  
** web.xml

%{code-snippet|brush-autodetect=1|file=${basedir}/src/main/webapp/WEB-INF/web.xml}

** MockHttpServlet

  Provided to show servicing by a Servlet container component.

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/main/java/net/officefloor/example/servletfilterdependencyinjection/MockHttpServlet.java}



Unit Test

  The unit test shows the servicing by the:
  
   * Servlet (as OfficeFloor will only service requests it is configured to do)
   
   * configured OfficeFloor dynamic web template which utilises the dependency injected EJB 

%{code-snippet|brush-autodetect=1|id=example|file=${basedir}/src/test/java/net/officefloor/example/servletfilterdependencyinjection/ExampleIT.java}

