                                         --------------------
                                      OfficeCompiler Architecture
                                         --------------------
                                         Daniel Sagenschneider
                                         --------------------

  To aid development teams to build large componentised systems and in improving system execution performance, OfficeFloor is <strongly typed>.  The <type safety> ensures the connections between the sources are valid so that the OfficeFrame can rely on this for execution and IDEs can use this to inform developers of 'correctness'.

  To ensure <type safety>, compilation of the sources by the OfficeCompiler produces <types>.  These <types> represent meta-data describing the public details of a source and its particular configuration.  To ensure flexibility of sources, the sources may use configuration to define how they are to be used rather than have all their details hard coded.  For example, a <ManagedObjectSource> for a socket allows the port to be defined in configuration.  This itself is likely not to change its <type>, however if the same socket <ManagedObjectSource> were to also allow security delegation by requiring a security object dependency, turning security on/off would change its <type> (whether a security object dependency is required).  Therefore to ascertain a <type> from a source, the source and its configuration must be compiled together.

  Once the <types> are made available, connections between sources can be validated for <type safety> by comparing the meta-data provides by the source <types>.  This is much like ensuring the calling code of the method (name and its arguments) match the declared method signature (name and its parameters).  Doing this up front means that errors are caught early in the development lifecycle reducing the likelihood of them creeping into production systems.

  The OfficeCompiler must therefore provide the following:

   * Compiles the sources into the OfficeFrame for execution, ensuring validates type safety

   * Provides compilation of the sources to produce their <types>, so these can be used by editors in IDEs



Making configuration manageable

  OfficeCompiler is built on top of OfficeFrame and introduces additional sources that aid in organising the other sources.  The purpose of these sources are to <componentise> the configuration of OfficeFloor to prevent creating <monolithic> configuration files.  It also enables developers to work in isolated <sections> of the system and not be contenting for single configuration files.  These sources are as follows:

*-------------------+-----------------------------------------------------------------------------------------------------------+
|| Source           || Description                                                                                              |
*-------------------+-----------------------------------------------------------------------------------------------------------+
| SectionSource     | Provides the componentising of an application's functionality.  Sections can have sub-section, with each sub-section having its own sub-sections.  This is similar to the concept of packages in java, except that a Section is compiled into a single <type> that can be added to other Sections or an Office. |
*-------------------+-----------------------------------------------------------------------------------------------------------+
| OfficeSource      | Provides the assembly details of an <application>.  An Office contains the top level Sections, with each Section subsequently containing sub-sections and so forth.  This is similar in concept to a <<<META-INF/web.xml>>> for a web application, except that an Office is compiled into a <type> that provides details of what the <application> requires for deployment. | 
*-------------------+-----------------------------------------------------------------------------------------------------------+
| OfficeFloorSource | Provides the deployment details of <applications> to the hardware.  An OfficeFloor contains one or more Offices and the necessary <ManagedObjects> and <Teams> to run the Offices. |
*-------------------+-----------------------------------------------------------------------------------------------------------+

  Further to these sources providing componentising of configuration, they have also been designed to allow the configuration to be graphical.  In other words, rather than the developer write these configurations out by hand, IDEs provide graphical editors that can configure each of these sources.  This means that developers can stop spending large amounts of time writing configuration files and get back to writing code.



Compiling the sources

  The main focus of the compiler is to compile the sources configured by the IDE into the OfficeFrame for execution.  Typically compilation follows these steps:

   [[1]] Compiler is given the OfficeFloorSource and its configuration location

   [[1]] Compiling the OfficeFloorSource identifies the necessary OfficeSources and their configuration locations

   [[1]] Compiling the subsequent OfficeSources identifies the SectionSources and their configuration locations

   [[1]] SectionSources may themselves contain other SectionSources creating a hierarchical organisation of the sections within an office (ie sections containing sub sections, containing sub sub sections, and so forth).

   [[1]] As each of these above sources are compiled they may result in any of the following sources to be loaded, validated and confirmed to be <type safe> in their connections to other sources:

      * ManagedObjectSource (available in each of OfficeFloorSource, OfficeSource and SectionSource)

      * WorkSource (available only within SectionSource)

      * AdministratorSource (available only within OfficeSource)

      * TeamSource (available only within OfficeFloorSource)

   [[1]] On compiling all sources a meta-data model of the application has been created.  This model is then loaded into the OfficeFrame (via the OfficeFrame configuration API).  Typically this step is known as "building" the Office Floor.

   [[1]] The result of compilation is an OfficeFloor object which may be started by calling its <<<openOfficeFloor>>> method (representing the idea of <opening the offices for business>)



Compiling sources to obtain types

  To aid in rapid application development (RAD), graphical editors are available in the IDEs to reduce time spent configuring.  To allow the graphical editors to validate the connections between sources, it requires the <type> information of the sources.  OfficeCompiler provides this functionality so that the IDEs can focus on graphical editing.



Starting points

  Much like OfficeFrame, OfficeCompiler should be seldom directly used.  Understanding that the OfficeCompiler compiles the configurations generated by the IDEs into the OfficeFrame is enough detail to start using OfficeFloor (IDEs will use OfficeCompiler <under the hood> allowing developers to not be too involved in its specifics).

  Should you want to gain more insight into how OfficeCompiler works, the following classes are good starting points:

*---------------------------------------------+---------------------------------------------------------------------------------+
|| Class                                      || Description                                                                    |
*---------------------------------------------+---------------------------------------------------------------------------------+
| net.officefloor.compile.OfficeFloorCompiler | Provides the starting point to compile an OfficeFloor.  It also provides access to the <Loaders> which enable obtaining the <types> for the sources. |
*---------------------------------------------+---------------------------------------------------------------------------------+
| net.officefloor.main.OfficeFloorMain        | Provides command line running of OfficeFloor                                    |
*---------------------------------------------+---------------------------------------------------------------------------------+
| net.officefloor.compile.test package        | Provides utility classes for testing sources                                    |
*---------------------------------------------+---------------------------------------------------------------------------------+
