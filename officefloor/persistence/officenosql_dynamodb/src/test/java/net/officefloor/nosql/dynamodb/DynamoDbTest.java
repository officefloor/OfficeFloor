package net.officefloor.nosql.dynamodb;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;

import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBVersionAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.QueryResultPage;
import com.amazonaws.services.dynamodbv2.datamodeling.TransactionWriteRequest;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Table;
import com.amazonaws.services.dynamodbv2.model.AttributeDefinition;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.CreateTableRequest;
import com.amazonaws.services.dynamodbv2.model.GlobalSecondaryIndex;
import com.amazonaws.services.dynamodbv2.model.KeySchemaElement;
import com.amazonaws.services.dynamodbv2.model.KeyType;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import com.amazonaws.services.dynamodbv2.model.ScalarAttributeType;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import net.officefloor.test.system.EnvironmentExtension;

/**
 * 
 * @author Daniel Sagenschneider
 */
public class DynamoDbTest {

	// Start dynamodb-local
	// docker run -p 8000:8000 amazon/dynamodb-local

	@RegisterExtension
	public final EnvironmentExtension environment = new EnvironmentExtension("AWS_ACCESS_KEY", "LOCAL",
			"AWS_SECRET_KEY", "LOCAL");

	@Test
	public void runAgainstDockerDynamoDb() throws Exception {
		AmazonDynamoDB dynamo = AmazonDynamoDBClientBuilder.standard().withEndpointConfiguration(
				new AwsClientBuilder.EndpointConfiguration("http://localhost:8000", "us-west-2")).build();
		createTableViaLowLevel(dynamo);
		createTableViaHighLevel(dynamo);
		listTables(dynamo, "HTTP");
	}

	public static void createTableViaLowLevel(AmazonDynamoDB db) throws Exception {
		DynamoDB dynamo = new DynamoDB(db);

		Table table = dynamo.createTable("low_level",
				Arrays.asList(new KeySchemaElement("year", KeyType.HASH), new KeySchemaElement("title", KeyType.RANGE)),
				Arrays.asList(new AttributeDefinition("year", ScalarAttributeType.N),
						new AttributeDefinition("title", ScalarAttributeType.S)),
				new ProvisionedThroughput(10L, 10L));
		table.waitForActive();
	}

	public static void createTableViaHighLevel(AmazonDynamoDB db) throws Exception {
		DynamoDBMapper dynamo = new DynamoDBMapper(db);

		// Create table
		CreateTableRequest createTable = dynamo.generateCreateTableRequest(TestEntity.class)
				.withProvisionedThroughput(new ProvisionedThroughput(10L, 10L));
		for (GlobalSecondaryIndex index : createTable.getGlobalSecondaryIndexes()) {
			index.setProvisionedThroughput(new ProvisionedThroughput(10L, 10L));
		}
		new DynamoDB(db).createTable(createTable).waitForActive();

		// Save
		TestEntity entity = new TestEntity("TEST", 10);
		dynamo.save(entity);

		// Transaction save
		TransactionWriteRequest transaction = new TransactionWriteRequest();
		transaction.addPut(new TestEntity("ONE", 1));
		transaction.addPut(new TestEntity("TWO", 2));
		dynamo.transactionWrite(transaction);

		// Retrieve
		TestEntity retrieved = dynamo.load(TestEntity.class, entity.getId(), entity.getAmount());
		assertEquals("TEST", retrieved.getMessage(), "Should retrieve stored entity");

		// Scan
		Map<String, AttributeValue> scanValues = new HashMap<>();
		scanValues.put(":v1", new AttributeValue().withN("5"));
		List<TestEntity> scanResults = dynamo.scan(TestEntity.class, new DynamoDBScanExpression()
				.withFilterExpression("amount > :v1").withExpressionAttributeValues(scanValues));
		assertEquals("TEST", scanResults.get(0).getMessage(), "Incorrect scanned entity");

		// Query
		Map<String, AttributeValue> queryValues = new HashMap<>();
		queryValues.put(":v1", new AttributeValue().withS(entity.getId()));
		queryValues.put(":v2", new AttributeValue().withN("5"));
		List<TestEntity> queryResults = dynamo.query(TestEntity.class, new DynamoDBQueryExpression<TestEntity>()
				.withKeyConditionExpression("id = :v1 and amount > :v2").withExpressionAttributeValues(queryValues));
		assertEquals("TEST", queryResults.get(0).getMessage(), "Incorrect queried entity");

		// Query Page
		QueryResultPage<TestEntity> queryPageResults = dynamo.queryPage(TestEntity.class,
				new DynamoDBQueryExpression<TestEntity>().withKeyConditionExpression("id = :v1 and amount > :v2")
						.withExpressionAttributeValues(queryValues));
		assertEquals("TEST", queryPageResults.getResults().get(0).getMessage(), "Incorrect queried entity");

		// Delete
		dynamo.delete(retrieved);
	}

	@Data
	@NoArgsConstructor
	@AllArgsConstructor
	@DynamoDBTable(tableName = "TestEntity")
	public static class TestEntity {

		@DynamoDBHashKey
		@DynamoDBAutoGeneratedKey
		private String id;

		private String message;

		@DynamoDBRangeKey
		private Integer amount;

		@DynamoDBIndexHashKey(globalSecondaryIndexName = "userId-lastModified-index")
		private Integer userId;

		@DynamoDBIndexRangeKey(globalSecondaryIndexName = "userId-lastModified-index")
		private Date lastModified;

		@DynamoDBVersionAttribute
		private Integer version;

		public TestEntity(String message, Integer amount) {
			this.message = message;
			this.amount = amount;
		}
	}

	public static void listTables(AmazonDynamoDB dynamo, String method) {
		System.out.println("Tables for " + method + ":");
		for (String tableName : dynamo.listTables().getTableNames()) {
			System.out.println("\t" + tableName);
			for (AttributeDefinition attribute : dynamo.describeTable(tableName).getTable().getAttributeDefinitions()) {
				System.out.println("\t\t" + attribute.getAttributeName() + " (" + attribute.getAttributeType() + ")");
			}
		}
	}

}
