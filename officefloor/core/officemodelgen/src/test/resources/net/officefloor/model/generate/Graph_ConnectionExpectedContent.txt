/*
 * 
 */
package graph.test;

import javax.annotation.processing.Generated;

import net.officefloor.model.AbstractModel;
import net.officefloor.model.ConnectionModel;

@Generated("net.officefloor.model.generate.ModelGenerator")
public class ConnectionModel extends AbstractModel implements ConnectionModel {

    public static enum ConnectionEvent {
     CHANGE_ONE, CHANGE_TWO
    }

    /**
     * Default constructor.
     */
    public ConnectionModel() {
    }

    /**
     * Convenience constructor.
     *
     * @param one One.
     * @param two Two.
     */
    public ConnectionModel(
      OneModel one
    , TwoModel two
    ) {
        this.one = one;
        this.two = two;
    }

    /**
     * Convenience constructor allowing XY initialising.
     *
     * @param one One.
     * @param two Two.
     * @param x Horizontal location.
     * @param y Vertical location.
     */
    public ConnectionModel(
      OneModel one
    , TwoModel two
    , int x
    , int y
    ) {
        this.one = one;
        this.two = two;
        this.setX(x);
        this.setY(y);
    }


    /**
     * One.
     */
    private OneModel one;

    /**
     * @return One.
     */
    public OneModel getOne() {
        return this.one;
    }

    /**
     * @param one One.
     */
    public void setOne(OneModel one) {
        OneModel oldValue = this.one;
        this.one = one;
        this.changeField(oldValue, this.one, ConnectionEvent.CHANGE_ONE);
    }


    /**
     * Two.
     */
    private TwoModel two;

    /**
     * @return Two.
     */
    public TwoModel getTwo() {
        return this.two;
    }

    /**
     * @param two Two.
     */
    public void setTwo(TwoModel two) {
        TwoModel oldValue = this.two;
        this.two = two;
        this.changeField(oldValue, this.two, ConnectionEvent.CHANGE_TWO);
    }


    /**
     * @return Indicates if removable.
     */
    public boolean isRemovable() {
        return true;
    }

    /**
     * Connects to the {@link AbstractModel} instances.
     */
    public void connect() {
        this.one.setTwoField(this);
        this.two.addOneList(this);
    }

    /**
     * Removes connection to the {@link AbstractModel} instances.
     */
    public void remove() {
        this.one.setTwoField(null);
        this.two.removeOneList(this);
    }

}